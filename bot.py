import asyncio
import logging
import json
import os
import re
import time
import traceback
import threading
import uuid
import shutil
import glob
import hashlib
import random
import string
import io
import base64
import zipfile
import sys
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Union, Any, Tuple, Set, Callable
from functools import wraps
from urllib.parse import urlencode, quote, unquote

import aiohttp  # Using aiohttp instead of requests for async HTTP calls
from aiofiles import open as aio_open  # Async file operations
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F, html
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ChatAction, ParseMode
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile,
    InputMediaPhoto, PhotoSize
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.utils.chat_action import ChatActionMiddleware
from aiogram.exceptions import TelegramAPIError
from aiogram.methods import GetUpdates

# –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
BOT_VERSION = "1.3.1"

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Render)
PORT = int(os.environ.get("PORT", 10000))
APP_URL = os.environ.get("APP_URL", "")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
# –ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ Render /tmp –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏,
# –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ /opt/render/project/src/
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = os.path.join(BASE_DIR, "data") 
os.makedirs(DATA_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Render
LOG_DIR = os.path.join(DATA_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
CACHE_DIR = os.path.join(DATA_DIR, "cache")
os.makedirs(CACHE_DIR, exist_ok=True)

BACKUP_DIR = os.path.join(DATA_DIR, "backups")
os.makedirs(BACKUP_DIR, exist_ok=True)

USER_MEDIA_DIR = os.path.join(DATA_DIR, "user_media")
os.makedirs(USER_MEDIA_DIR, exist_ok=True)

STATS_DIR = os.path.join(DATA_DIR, "stats")
os.makedirs(STATS_DIR, exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG = {
    "API_URL": "https://api.intelligence.io.solutions/api/v1",
    "TOKEN": os.environ.get("TELEGRAM_TOKEN", "7839597384:AAFlm4v3qcudhJfiFfshz1HW6xpKhtqlV5g"),
    "API_KEY": os.environ.get("AI_API_KEY", "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImJlMjYwYjFhLWI0OWMtNDU2MC04ODZiLTMwYTBmMGFlNGZlNSIsImV4cCI6NDg5OTUwNzg0MH0.Z46h1WZ-2jsXyg43r2M0okgeLoSEzrq-ULHRMS-EW6r3ccxYkXTZ5mNJO5Aw1qBAkRI5NX9t8zXc1sbUxt8WzA"),
    "DEFAULT_SYSTEM_PROMPT": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –æ–±—à–∏—Ä–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö, –≤–∫–ª—é—á–∞—è –ø–∏—Å–∞—Ç–µ–ª–µ–π, —É—á–µ–Ω—ã—Ö –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ü—É—à–∫–∏–Ω, –¢–æ–ª—Å—Ç–æ–π, –ì–æ–≥–æ–ª—å, –≠–π–Ω—à—Ç–µ–π–Ω, –¢–µ—Å–ª–∞, –ù—å—é—Ç–æ–Ω, –°–æ–∫—Ä–∞—Ç, –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö. –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
    "MAX_MESSAGE_LENGTH": 4096,
    "MAX_CONTEXT_LENGTH": 50,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    "TEMPERATURE": 0.3,  # –£—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∏–∂–µ = –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ)
    "MAX_TOKENS": 8000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    "RETRY_ATTEMPTS": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    "ADMIN_IDS": [12345678],  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    "ALLOWED_FORMATS": ["jpg", "jpeg", "png", "webp"],  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    "MAX_FILE_SIZE": 20 * 1024 * 1024,  # –£–≤–µ–ª–∏—á–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (20 –ú–ë)
    "CACHE_TIMEOUT": 3600,  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
    "FALLBACK_MODE": True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    "PERSISTENT_STORAGE": DATA_DIR,  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Render)
    "CONTEXT_DECAY": 0.9,  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (1.0 = –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω—ã)
    "REQUEST_TIMEOUT": 120,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    "USE_WEBHOOK": True if APP_URL else False,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –≤–º–µ—Å—Ç–æ polling –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω APP_URL
    "MAX_INLINE_KEYBOARDS": 5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É –¥–ª—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    "STATS_API_KEY": os.environ.get("STATS_API_KEY", "statskey"),  # –ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    "MAX_DAILY_REQUESTS": 40,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ
    "PREMIUM_USER_IDS": [],  # ID –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
    "LOG_ROTATION_SIZE": 10 * 1024 * 1024,  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ø–µ—Ä–µ–¥ —Ä–æ—Ç–∞—Ü–∏–µ–π (10 –ú–ë)
    "LOG_BACKUPS_COUNT": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    "HEALTH_CHECK_INTERVAL": 3600,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "USER_TIMEOUT_SECONDS": 300,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "RATE_LIMIT_WINDOW": 60,  # –û–∫–Ω–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "RATE_LIMIT_MAX_REQUESTS": 15,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –æ–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
    "BACKUP_INTERVAL": 3600,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "MAINTENANCE_MODE": False,  # –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    "WEBHOOK_SECRET_TOKEN": os.environ.get("WEBHOOK_SECRET", ""),  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–µ–±—Ö—É–∫–∞
    "DEBUG_MODE": os.environ.get("DEBUG_MODE", "0") == "1",  # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    "ENABLE_THINKING_ANIMATION": True,  # –ò–º–∏—Ç–∞—Ü–∏—è "AI –¥—É–º–∞–µ—Ç"
    "ENABLE_SPAM_PROTECTION": True,  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã
    "STREAM_RESPONSES": True,  # –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    "THINKING_MESSAGES": [
        "üí≠ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
        "üîç AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        "üß† AI —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...",
        "‚è≥ AI –ø–æ–¥–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç...",
        "üìö AI –∏–∑—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ...",
        "üîÑ AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º..."
    ],
}

# –ü–∞—Ç–µ—Ä–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã
SPAM_PATTERNS = [
    r"(?i)–∑–∞—Ä–∞–±–æ—Ç[–∞-—è]+ –¥–µ–Ω—å–≥–∏",
    r"(?i)–∏–Ω–≤–µ—Å—Ç–∏—Ü[–∞-—è]+ –≤ –∫—Ä–∏–ø—Ç[–∞-—è]+",
    r"(?i)–ø–æ–ª—É—á[–∞-—è]+ –¥–æ—Ö–æ–¥",
    r"(?i)–ø–∞—Å—Å–∏–≤–Ω[–∞-—è]+ –¥–æ—Ö–æ–¥",
    r"(?i)–∑–∞—Ä–∞–±[–∞-—è]+ –±–µ–∑ –≤–ª–æ–∂–µ–Ω[–∞-—è]+",
    r"(?i)–æ–±—É—á[–∞-—è]+ —Ç—Ä–µ–π–¥[–∞-—è]+",
    r"(?i)–ø—Ä–∏—Å–æ–µ–¥–∏–Ω[–∞-—è]+ –∫ –±–æ—Ç[–∞-—è]+",
    r"(?i)–ø—Ä–∏–≥–ª–∞—à[–∞-—è]+ –≤ —á–∞—Ç",
    r"(?i)—Ä–µ–∫–ª–∞–º[–∞-—è]+ –ø–æ—Å—Ç",
    r"(?i)—Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑[–∞-—è]+",
    r"(?i)–±–µ—Å–ø–ª–∞—Ç–Ω[–∞-—è]+ –∫—É—Ä—Å",
    r"(?i)–ø–µ—Ä–µ—Ö–æ–¥[–∞-—è]+ –ø–æ —Å—Å—ã–ª–∫[–∞-—è]+",
    r"(?i)–∞–¥–º–∏–Ω[–∞-—è]+ –±–æ—Ç[–∞-—è]+",
    r"(?i)telegram-–∫–∞–Ω–∞–ª",
    r"(?i)–∑–∞—Ö–æ–¥–∏[–∞-—è]+ –≤ –±–æ—Ç[–∞-—è]+",
    r"(?i)(t\.me|telegram\.me)\/[a-zA-Z0-9_]+",
    r"(?i)–ø–æ–¥–ø–∏—Å[–∞-—è]+ –Ω–∞ –∫–∞–Ω–∞–ª",
    r"(?i)–ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç[–∞-—è]+",
    r"(?i)–±—ã—Å—Ç—Ä[–∞-—è]+ –¥–µ–Ω—å–≥[–∞-—è]+",
]

# –°–≤–µ–¥–µ–Ω–∏—è –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö
HISTORICAL_FIGURES = {
    "–ø—É—à–∫–∏–Ω": {
        "full_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á –ü—É—à–∫–∏–Ω",
        "years": "1799-1837",
        "category": "–ü–æ—ç—Ç, –¥—Ä–∞–º–∞—Ç—É—Ä–≥, –ø—Ä–æ–∑–∞–∏–∫, –ø—É–±–ª–∏—Ü–∏—Å—Ç, –∫—Ä–∏—Ç–∏–∫",
        "description": "–í–µ–ª–∏—á–∞–π—à–∏–π —Ä—É—Å—Å–∫–∏–π –ø–æ—ç—Ç, –¥—Ä–∞–º–∞—Ç—É—Ä–≥ –∏ –ø—Ä–æ–∑–∞–∏–∫, –æ—Å–Ω–æ–≤–æ–ø–æ–ª–æ–∂–Ω–∏–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —è–∑—ã–∫–∞.",
        "works": ["–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω", "–†—É—Å–ª–∞–Ω –∏ –õ—é–¥–º–∏–ª–∞", "–ö–∞–ø–∏—Ç–∞–Ω—Å–∫–∞—è –¥–æ—á–∫–∞", "–ë–æ—Ä–∏—Å –ì–æ–¥—É–Ω–æ–≤", "–ú–µ–¥–Ω—ã–π –≤—Å–∞–¥–Ω–∏–∫"],
    },
    "–≥–æ–≥–æ–ª—å": {
        "full_name": "–ù–∏–∫–æ–ª–∞–π –í–∞—Å–∏–ª—å–µ–≤–∏—á –ì–æ–≥–æ–ª—å",
        "years": "1809-1852",
        "category": "–ü—Ä–æ–∑–∞–∏–∫, –¥—Ä–∞–º–∞—Ç—É—Ä–≥, –ø–æ—ç—Ç, –∫—Ä–∏—Ç–∏–∫, –ø—É–±–ª–∏—Ü–∏—Å—Ç",
        "description": "–†—É—Å—Å–∫–∏–π –ø—Ä–æ–∑–∞–∏–∫, –¥—Ä–∞–º–∞—Ç—É—Ä–≥, –ø–æ—ç—Ç, –∫—Ä–∏—Ç–∏–∫, –ø—É–±–ª–∏—Ü–∏—Å—Ç, –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –æ–¥–Ω–∏–º –∏–∑ –∫–ª–∞—Å—Å–∏–∫–æ–≤ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.",
        "works": ["–ú–µ—Ä—Ç–≤—ã–µ –¥—É—à–∏", "–†–µ–≤–∏–∑–æ—Ä", "–¢–∞—Ä–∞—Å –ë—É–ª—å–±–∞", "–í–µ—á–µ—Ä–∞ –Ω–∞ —Ö—É—Ç–æ—Ä–µ –±–ª–∏–∑ –î–∏–∫–∞–Ω—å–∫–∏", "–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–µ –ø–æ–≤–µ—Å—Ç–∏"],
    },
    "—Ç–æ–ª—Å—Ç–æ–π": {
        "full_name": "–õ–µ–≤ –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –¢–æ–ª—Å—Ç–æ–π",
        "years": "1828-1910",
        "category": "–ü–∏—Å–∞—Ç–µ–ª—å, –º—ã—Å–ª–∏—Ç–µ–ª—å",
        "description": "–û–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π –∏ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π, –∞–≤—Ç–æ—Ä —Ä–æ–º–∞–Ω–æ–≤ '–í–æ–π–Ω–∞ –∏ –º–∏—Ä', '–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ'.",
        "works": ["–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å—Å–∫–∏–µ —Ä–∞—Å—Å–∫–∞–∑—ã", "–î–µ—Ç—Å—Ç–≤–æ. –û—Ç—Ä–æ—á–µ—Å—Ç–≤–æ. –Æ–Ω–æ—Å—Ç—å"],
    },
    "–ª–µ—Ä–º–æ–Ω—Ç–æ–≤": {
        "full_name": "–ú–∏—Ö–∞–∏–ª –Æ—Ä—å–µ–≤–∏—á –õ–µ—Ä–º–æ–Ω—Ç–æ–≤",
        "years": "1814-1841",
        "category": "–ü–æ—ç—Ç, –ø—Ä–æ–∑–∞–∏–∫, –¥—Ä–∞–º–∞—Ç—É—Ä–≥",
        "description": "–†—É—Å—Å–∫–∏–π –ø–æ—ç—Ç, –ø—Ä–æ–∑–∞–∏–∫, –¥—Ä–∞–º–∞—Ç—É—Ä–≥, —Ö—É–¥–æ–∂–Ω–∏–∫. –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∏ –ª–∏—á–Ω—ã–µ –º–æ—Ç–∏–≤—ã, –æ—Ç–≤–µ—á–∞–≤—à–∏–µ –Ω–∞—Å—É—â–Ω—ã–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ —Ä—É—Å—Å–∫–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞, –æ–∑–Ω–∞–º–µ–Ω–æ–≤–∞–ª–æ —Å–æ–±–æ–π –Ω–æ–≤—ã–π —Ä–∞—Å—Ü–≤–µ—Ç —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.",
        "works": ["–ì–µ—Ä–æ–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "–ú—Ü—ã—Ä–∏", "–î–µ–º–æ–Ω", "–ë–æ—Ä–æ–¥–∏–Ω–æ", "–ú–∞—Å–∫–∞—Ä–∞–¥"],
    },
    "—ç–π–Ω—à—Ç–µ–π–Ω": {
        "full_name": "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
        "years": "1879-1955",
        "category": "–§–∏–∑–∏–∫-—Ç–µ–æ—Ä–µ—Ç–∏–∫",
        "description": "–§–∏–∑–∏–∫-—Ç–µ–æ—Ä–µ—Ç–∏–∫, –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–∫–∏, –ª–∞—É—Ä–µ–∞—Ç –ù–æ–±–µ–ª–µ–≤—Å–∫–æ–π –ø—Ä–µ–º–∏–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ 1921 –≥–æ–¥–∞, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—è—Ç–µ–ª—å-–≥—É–º–∞–Ω–∏—Å—Ç.",
        "discoveries": ["–¢–µ–æ—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–§–æ—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç", "–ë—Ä–æ—É–Ω–æ–≤—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", "E=mc¬≤"],
    },
    "—Ç–µ—Å–ª–∞": {
        "full_name": "–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞",
        "years": "1856-1943",
        "category": "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å, –∏–Ω–∂–µ–Ω–µ—Ä, —Ñ–∏–∑–∏–∫",
        "description": "–°–µ—Ä–±—Å–∫–∏–π –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å –∏ —Ñ–∏–∑–∏–∫, —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–Ω–æ–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–º —Ç–æ–∫–µ, —Å–¥–µ–ª–∞–≤—à–∏–π —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Ä–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏–∫–∏.",
        "discoveries": ["–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–º —Ç–æ–∫–µ", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –¢–µ—Å–ª—ã", "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —ç–Ω–µ—Ä–≥–∏–∏", "–†–∞–¥–∏–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]
    },
    "–Ω—å—é—Ç–æ–Ω": {
        "full_name": "–ò—Å–∞–∞–∫ –ù—å—é—Ç–æ–Ω",
        "years": "1643-1727",
        "category": "–§–∏–∑–∏–∫, –º–∞—Ç–µ–º–∞—Ç–∏–∫, –∞—Å—Ç—Ä–æ–Ω–æ–º",
        "description": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∏–∑–∏–∫, –º–∞—Ç–µ–º–∞—Ç–∏–∫, –º–µ—Ö–∞–Ω–∏–∫ –∏ –∞—Å—Ç—Ä–æ–Ω–æ–º, –æ–¥–∏–Ω –∏–∑ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–∫–∏ –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ –∏—Å—á–∏—Å–ª–µ–Ω–∏–π.",
        "discoveries": ["–ó–∞–∫–æ–Ω –≤—Å–µ–º–∏—Ä–Ω–æ–≥–æ —Ç—è–≥–æ—Ç–µ–Ω–∏—è", "–ó–∞–∫–æ–Ω—ã –¥–≤–∏–∂–µ–Ω–∏—è", "–ö–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–∞—è —Ç–µ–æ—Ä–∏—è —Å–≤–µ—Ç–∞", "–ò—Å—á–∏—Å–ª–µ–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–∞–ª—ã—Ö"]
    },
    "—Å–æ–∫—Ä–∞—Ç": {
        "full_name": "–°–æ–∫—Ä–∞—Ç",
        "years": "470-399 –¥–æ –Ω.—ç.",
        "category": "–§–∏–ª–æ—Å–æ—Ñ",
        "description": "–î—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ, —É—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–º–µ–Ω—É–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç –≤ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ -- –æ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥—ã –∏ –º–∏—Ä–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é —á–µ–ª–æ–≤–µ–∫–∞.",
        "works": ["–î–∏–∞–ª–æ–≥–∏ (–≤ –∑–∞–ø–∏—Å—è—Ö –ü–ª–∞—Ç–æ–Ω–∞)", "–ê–ø–æ–ª–æ–≥–∏—è –°–æ–∫—Ä–∞—Ç–∞", "–°–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥"]
    },
    "–ø–ª–∞—Ç–æ–Ω": {
        "full_name": "–ü–ª–∞—Ç–æ–Ω",
        "years": "428/427-348/347 –¥–æ –Ω.—ç.",
        "category": "–§–∏–ª–æ—Å–æ—Ñ",
        "description": "–î—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–∏–π —Ñ–∏–ª–æ—Å–æ—Ñ, —É—á–µ–Ω–∏–∫ –°–æ–∫—Ä–∞—Ç–∞, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ê–∫–∞–¥–µ–º–∏–∏, –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–≤—ã—Ö —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —à–∫–æ–ª. –ï–≥–æ –∏–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –æ–∫–∞–∑–∞–ª–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –º—ã—Å–ª–∏.",
        "works": ["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ", "–ü–∏—Ä", "–§–µ–¥–æ–Ω", "–¢–µ—ç—Ç–µ—Ç", "–°–æ—Ñ–∏—Å—Ç"]
    }
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
MODEL_CATEGORIES = {
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ": [
        "meta-llama/Llama-3.3-70B-Instruct",
        "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
        "mistralai/Mistral-Large-Instruct-2411",
        "databricks/dbrx-instruct",
        "google/gemma-3-27b-it",
    ],
    "–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π": [
        "meta-llama/Llama-3.2-90B-Vision-Instruct",
        "Qwen/Qwen2-VL-7B-Instruct",
    ],
    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ": [
        "Qwen/Qwen2.5-Coder-32B-Instruct",
        "nvidia/AceMath-7B-Instruct",
        "jinaai/ReaderLM-v2",
        "watt-ai/watt-tool-70B",
    ],
    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ": [
        "Qwen/QwQ-32B",
        "deepseek-ai/DeepSeek-R1-Distill-Llama-70B",
        "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B",
        "mistralai/Ministral-8B-Instruct-2410",
        "netease-youdao/Confucius-01-14B",
        "microsoft/phi-4",
        "bespokelabs/Bespoke-Stratos-32B",
        "NovaSky-AI/Sky-T1-32B-Preview",
        "tiiuae/Falcon3-10B-Instruct",
        "THUDM/glm-4-9b-chat",
        "CohereForAI/aya-expanse-326",
        "openbmb/MiniCPM3-4B",
        "Qwen/Qwen2.5-1.5B-Instruct",
        "ozone-ai/ox-1",
        "microsoft/Phi-3.5-mini-instruct",
        "ibm-granite/granite-3.1-8b-instruct",
        "SentientAGI/Dobby-Mini-Unhinged-Llama-3.1-8B",
        "neuralmagic/Llama-3.1-Nemotron-70B-Instruct-HF-FP8-dynamic",
    ]
}

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
SPECIALIZED_MODELS = {
    "code": ["Qwen/Qwen2.5-Coder-32B-Instruct", "watt-ai/watt-tool-70B"],
    "math": ["nvidia/AceMath-7B-Instruct"],
    "reading": ["jinaai/ReaderLM-v2"],
    "history": ["meta-llama/Llama-3.3-70B-Instruct", "mistralai/Mistral-Large-Instruct-2411"],
    "literature": ["meta-llama/Llama-3.3-70B-Instruct", "mistralai/Mistral-Large-Instruct-2411"],
    "science": ["meta-llama/Llama-3.3-70B-Instruct", "google/gemma-3-27b-it"],
    "medicine": ["databricks/dbrx-instruct", "meta-llama/Llama-3.3-70B-Instruct"],
    "philosophy": ["mistralai/Mistral-Large-Instruct-2411", "netease-youdao/Confucius-01-14B"],
}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
ALL_MODELS = []
for category, models in MODEL_CATEGORIES.items():
    ALL_MODELS.extend(models)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
GREETINGS = {
    r"(?i)^(–ø—Ä–∏–≤–µ—Ç|—Ö–∞–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞—Å—Ç–µ|—Ö–µ–ª–ª–æ|hi|hello)": [
        "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º.",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    ],
    r"(?i)^–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ (—Ç—ã|—É —Ç–µ–±—è)": [
        "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–†–∞–±–æ—Ç–∞—é –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        "–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º."
    ],
    r"(?i)^–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ": [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
    ],
    r"(?i)^–¥–æ–±—Ä—ã–π –¥–µ–Ω—å": [
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã."
    ],
    r"(?i)^–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä": [
        "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
        "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
    ]
}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
TOPIC_PATTERNS = {
    "code": r"(?i)(–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º|—Å–∫—Ä–∏–ø—Ç|—Ñ—É–Ω–∫—Ü–∏|–º–µ—Ç–æ–¥|–∫–ª–∞—Å—Å|python|java|javascript|html|css|sql|bash|ruby|golang|c\+\+)",
    "math": r"(?i)(–º–∞—Ç–µ–º–∞—Ç–∏–∫|—É—Ä–∞–≤–Ω–µ–Ω–∏|–≤—ã—á–∏—Å–ª–∏|—Ä–µ—à–∏—Ç—å|–∑–∞–¥–∞—á|–¥—Ä–æ–±—å|–∏–Ω—Ç–µ–≥—Ä–∞–ª|–ø—Ä–æ–∏–∑–≤–æ–¥–Ω|–∞–ª–≥–µ–±—Ä|–≥–µ–æ–º–µ—Ç—Ä–∏)",
    "history": r"(?i)(–∏—Å—Ç–æ—Ä–∏|[\d]{3,4} –≥–æ–¥|–¥—Ä–µ–≤–Ω|—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤|–≤–æ–π–Ω|—Ä–µ–≤–æ–ª—é—Ü–∏|–∏–º–ø–µ—Ä–∏|–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤|—Ü–∞—Ä—å|–∫–æ—Ä–æ–ª—å)",
    "literature": r"(?i)(–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä|–ø–∏—Å–∞—Ç–µ–ª—å|–ø–æ—ç—Ç|—Å—Ç–∏—Ö|—Ä–æ–º–∞–Ω|–ø–æ–≤–µ—Å—Ç—å|—Ä–∞—Å—Å–∫–∞–∑|–∫–Ω–∏–≥|–ø–æ—ç–º)",
    "science": r"(?i)(–Ω–∞—É–∫|—Ñ–∏–∑–∏–∫|—Ö–∏–º–∏|–±–∏–æ–ª–æ–≥|–∞—Å—Ç—Ä–æ–Ω–æ–º|–≥–µ–æ–ª–æ–≥|–≥–µ–æ–≥—Ä–∞—Ñ|—Ç–µ–æ—Ä|—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç)",
    "medicine": r"(?i)(–º–µ–¥–∏—Ü–∏–Ω|–∑–¥–æ—Ä–æ–≤—å|–±–æ–ª–µ–∑–Ω|–ª–µ—á–µ–Ω–∏|–¥–∏–∞–≥–Ω–æ–∑|–≤—Ä–∞—á|–ø–∞—Ü–∏–µ–Ω—Ç|—Å–∏–º–ø—Ç–æ–º|—Ç–µ—Ä–∞–ø–∏|—Ö–∏—Ä—É—Ä–≥)",
    "philosophy": r"(?i)(—Ñ–∏–ª–æ—Å–æ—Ñ|–º—ã—Å–ª|—ç—Ç–∏–∫|–º–æ—Ä–∞–ª—å|—Å–æ–∑–Ω–∞–Ω–∏|–±—ã—Ç–∏–µ|–ø–æ–∑–Ω–∞–Ω–∏|–æ–Ω—Ç–æ–ª–æ–≥|–≥–Ω–æ—Å–µ–æ–ª–æ–≥)",
}

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö
HISTORICAL_PATTERN = r"(?i)(?:–∫—Ç–æ (?:—Ç–∞–∫(–æ–π|–∞—è|–æ–µ|–∏–µ)|–±—ã–ª|—è–≤–ª—è(?:–µ—Ç|–ª)—Å—è|–∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫)|—Ä–∞—Å—Å–∫–∞–∂(?:–∏|–∏—Ç–µ) (?:–æ|–ø—Ä–æ|–º–Ω–µ –æ|–º–Ω–µ –ø—Ä–æ)|—á—Ç–æ (?:—Ç—ã |–≤—ã )?–∑–Ω–∞–µ—à—å (?:–æ|–ø—Ä–æ)|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏[—è—é] (?:–æ|–ø—Ä–æ))\s+([–ê-–Ø–∞-—è–Å—ë]+)"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
rate_limits = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π "AI –ø–∏—à–µ—Ç..."
thinking_messages = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO if not CONFIG["DEBUG_MODE"] else logging.DEBUG)

try:
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
    from logging.handlers import RotatingFileHandler
    
    log_file_path = os.path.join(LOG_DIR, "bot.log")
    file_handler = RotatingFileHandler(
        log_file_path,
        maxBytes=CONFIG["LOG_ROTATION_SIZE"],
        backupCount=CONFIG["LOG_BACKUPS_COUNT"],
        encoding='utf-8'
    )
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logger.addHandler(file_handler)
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    error_log_path = os.path.join(LOG_DIR, "errors.log")
    error_handler = RotatingFileHandler(
        error_log_path,
        maxBytes=5*1024*1024,  # 5 –ú–ë –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        backupCount=3,  # –•—Ä–∞–Ω–∏—Ç—å –¥–æ 3 —Ñ–∞–π–ª–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s\n%(pathname)s:%(lineno)d\n'))
    logger.addHandler(error_handler)
    
except Exception as e:
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä: {e}")
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞

# –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
bot = Bot(token=CONFIG["TOKEN"])
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
dp.message.middleware(ChatActionMiddleware())

# FSM –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class UserStates(StatesGroup):
    waiting_for_message = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    custom_system_prompt = State()  # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    waiting_for_model_selection = State()  # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    waiting_for_temperature = State()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ temperature
    waiting_for_feedback = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
    waiting_for_direct_model = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    waiting_for_image_caption = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    waiting_for_admin_broadcast = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
    waiting_for_premium_code = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–µ–º–∏—É–º-–∫–æ–¥–∞
    waiting_for_file_processing = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    waiting_for_spam_pattern = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å–ø–∞–º–∞

# –ö—ç—à –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
model_cache = {}  # –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
user_settings = {}  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_contexts = {}  # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_feedback = {}  # –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
model_performance = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
request_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
user_files = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
premium_codes = set()  # –ù–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-–∫–æ–¥–æ–≤
user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
blocked_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º–∞

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
user_sessions = {}  

# HTTP —Å–µ—Å—Å–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
http_session = None

# –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è Render
class BotMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    
    def __init__(self):
        self.start_time = time.time()
        self.requests_total = 0
        self.requests_success = 0
        self.requests_failed = 0
        self.response_times = []
        self.errors = {}
        self.active_users = set()
        self.models_usage = {}
        self.topics_usage = {}
        self.daily_stats = {}
        self.spam_blocked = 0
        self.complex_queries = 0  # –°—á–µ—Ç—á–∏–∫ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.lock = asyncio.Lock()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        self._load_metrics()
    
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop"""
        asyncio.create_task(self._periodic_save())
    
    async def record_request(self, user_id: int, success: bool, response_time: float, model: str = None, 
                           topic: str = None, error: str = None, is_complex: bool = False):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ."""
        async with self.lock:
            self.requests_total += 1
            if success:
                self.requests_success += 1
                self.response_times.append(response_time)
                # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –≤—Ä–µ–º–µ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                if len(self.response_times) > 1000:
                    self.response_times = self.response_times[-1000:]
            else:
                self.requests_failed += 1
                if error:
                    self.errors[error] = self.errors.get(error, 0) + 1
            
            self.active_users.add(user_id)
            
            if is_complex:
                self.complex_queries += 1
                
            if model:
                self.models_usage[model] = self.models_usage.get(model, 0) + 1
                
            if topic:
                self.topics_usage[topic] = self.topics_usage.get(topic, 0) + 1
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = date.today().isoformat()
            if today not in self.daily_stats:
                self.daily_stats[today] = {
                    "requests": 0,
                    "success": 0,
                    "failed": 0,
                    "unique_users": set(),
                    "models": {},
                    "topics": {},
                    "spam_blocked": 0,
                    "complex_queries": 0
                }
            
            daily = self.daily_stats[today]
            daily["requests"] += 1
            
            if success:
                daily["success"] += 1
            else:
                daily["failed"] += 1
                
            daily["unique_users"].add(user_id)
            
            if is_complex:
                daily["complex_queries"] = daily.get("complex_queries", 0) + 1
                
            if model:
                daily["models"][model] = daily["models"].get(model, 0) + 1
                
            if topic:
                daily["topics"][topic] = daily["topics"].get(topic, 0) + 1
    
    def record_spam_block(self):
        """–£—á–∏—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–ø–∞–º–∞."""
        self.spam_blocked += 1
        
        today = date.today().isoformat()
        if today in self.daily_stats:
            self.daily_stats[today]["spam_blocked"] = self.daily_stats[today].get("spam_blocked", 0) + 1
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
        uptime = time.time() - self.start_time
        avg_response_time = sum(self.response_times) / len(self.response_times) if self.response_times else 0
        
        # –î–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏
        daily_stats_json = {}
        for day, stats in self.daily_stats.items():
            daily_stats_json[day] = {
                "requests": stats["requests"],
                "success": stats["success"],
                "failed": stats["failed"],
                "unique_users": len(stats["unique_users"]),
                "models": stats["models"],
                "topics": stats["topics"],
                "spam_blocked": stats.get("spam_blocked", 0),
                "complex_queries": stats.get("complex_queries", 0)
            }
        
        return {
            "uptime_seconds": uptime,
            "uptime_formatted": self._format_uptime(uptime),
            "requests": {
                "total": self.requests_total,
                "success": self.requests_success,
                "failed": self.requests_failed,
                "success_rate": (self.requests_success / self.requests_total * 100) if self.requests_total else 0
            },
            "response_time": {
                "average_ms": avg_response_time * 1000,
                "min_ms": min(self.response_times) * 1000 if self.response_times else 0,
                "max_ms": max(self.response_times) * 1000 if self.response_times else 0
            },
            "users": {
                "active_count": len(self.active_users)
            },
            "models": {
                k: v for k, v in sorted(self.models_usage.items(), key=lambda x: x[1], reverse=True)
            },
            "topics": {
                k: v for k, v in sorted(self.topics_usage.items(), key=lambda x: x[1], reverse=True)
            },
            "top_errors": {
                k: v for k, v in sorted(self.errors.items(), key=lambda x: x[1], reverse=True)[:5]
            },
            "daily_stats": daily_stats_json,
            "spam_blocked": self.spam_blocked,
            "complex_queries": self.complex_queries,
            "timestamp": datetime.now().isoformat(),
            "version": BOT_VERSION
        }
    
    def _load_metrics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            metrics_file = os.path.join(STATS_DIR, "latest_metrics.json")
            if os.path.exists(metrics_file):
                with open(metrics_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    self.requests_total = data.get("requests", {}).get("total", 0)
                    self.requests_success = data.get("requests", {}).get("success", 0)
                    self.requests_failed = data.get("requests", {}).get("failed", 0)
                    self.errors = data.get("top_errors", {})
                    self.models_usage = data.get("models", {})
                    self.topics_usage = data.get("topics", {})
                    self.spam_blocked = data.get("spam_blocked", 0)
                    self.complex_queries = data.get("complex_queries", 0)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    daily_stats = data.get("daily_stats", {})
                    for day, stats in daily_stats.items():
                        self.daily_stats[day] = {
                            "requests": stats.get("requests", 0),
                            "success": stats.get("success", 0),
                            "failed": stats.get("failed", 0),
                            "unique_users": set(),
                            "models": stats.get("models", {}),
                            "topics": stats.get("topics", {}),
                            "spam_blocked": stats.get("spam_blocked", 0),
                            "complex_queries": stats.get("complex_queries", 0)
                        }
                        
                        # –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –º–æ–∂–µ–º (–æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ count)
                        
                    logger.info("–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _periodic_save(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏."""
        while True:
            await asyncio.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await self._save_metrics()
    
    async def _save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            stats = self.get_stats()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics_file = os.path.join(STATS_DIR, "latest_metrics.json")
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
            async with aio_open(metrics_file, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(stats, ensure_ascii=False, indent=2))
                
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∫–∞–∂–¥—ã–π —á–∞—Å
            current_hour = datetime.now().strftime('%Y%m%d_%H')
            hourly_file = os.path.join(STATS_DIR, f"metrics_{current_hour}.json")
            if not os.path.exists(hourly_file):
                async with aio_open(hourly_file, 'w', encoding='utf-8') as f:
                    await f.write(json.dumps(stats, ensure_ascii=False, indent=2))
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 48 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö = 2 –¥–Ω—è)
                await self._cleanup_old_metrics(48)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _cleanup_old_metrics(self, keep_count: int):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
        try:
            metrics_files = glob.glob(os.path.join(STATS_DIR, "metrics_*.json"))
            metrics_files.sort(key=os.path.getmtime)
            
            if len(metrics_files) > keep_count:
                for old_file in metrics_files[:-keep_count]:
                    try:
                        os.remove(old_file)
                        logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –º–µ—Ç—Ä–∏–∫: {old_file}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –º–µ—Ç—Ä–∏–∫ {old_file}: {e}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _format_uptime(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
        days, remainder = divmod(int(seconds), 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω.")
        if hours > 0 or days > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0 or hours > 0 or days > 0:
            parts.append(f"{minutes} –º–∏–Ω.")
        parts.append(f"{seconds} —Å–µ–∫.")
        
        return " ".join(parts)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
bot_metrics = BotMetrics()

# –§—É–Ω–∫—Ü–∏–∏-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def with_retry(max_retries: int = 3, delay: float = 1.0, backoff: float = 2.0,
               exceptions: tuple = (Exception,)):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.
    
    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            mtries, mdelay = max_retries, delay
            
            while mtries > 0:
                try:
                    return await func(*args, **kwargs)
                except exceptions as e:
                    mtries -= 1
                    if mtries <= 0:
                        logger.error(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        raise
                    
                    logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {max_retries - mtries}/{max_retries} –¥–ª—è {func.__name__}: {str(e)}")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff)
                    await asyncio.sleep(mdelay)
                    mdelay *= backoff
            
            return await func(*args, **kwargs)
        return wrapper
    return decorator

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in CONFIG["ADMIN_IDS"]:
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        return await func(message, *args, **kwargs)
    return wrapper

def rate_limit(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        user_id = message.from_user.id
        username = message.from_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id in CONFIG["ADMIN_IDS"] or username == "qqq5599" or user_id in CONFIG["PREMIUM_USER_IDS"]:
            return await func(message, *args, **kwargs)
        
        current_time = time.time()
        window_size = CONFIG["RATE_LIMIT_WINDOW"]
        max_requests = CONFIG["RATE_LIMIT_MAX_REQUESTS"]
        
        if user_id not in rate_limits:
            rate_limits[user_id] = {"requests": [], "warned": False}
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        rate_limits[user_id]["requests"] = [req_time for req_time in rate_limits[user_id]["requests"] 
                                         if current_time - req_time < window_size]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
        if len(rate_limits[user_id]["requests"]) >= max_requests:
            if not rate_limits[user_id]["warned"]:
                await message.answer(
                    f"‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {window_size} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ "
                    f"—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –õ–∏–º–∏—Ç: {max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {window_size} —Å–µ–∫—É–Ω–¥."
                )
                rate_limits[user_id]["warned"] = True
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        rate_limits[user_id]["requests"].append(current_time)
        rate_limits[user_id]["warned"] = False
        
        return await func(message, *args, **kwargs)
    return wrapper

def spam_filter(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã."""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        if not CONFIG["ENABLE_SPAM_PROTECTION"]:
            return await func(message, *args, **kwargs)
            
        user_id = message.from_user.id
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –ø–æ–¥–ø–∞–¥–∞—é—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞
        if user_id in CONFIG["ADMIN_IDS"]:
            return await func(message, *args, **kwargs)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            for pattern in SPAM_PATTERNS:
                if re.search(pattern, message.text):
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ø–∞–º
                    bot_metrics.record_spam_block()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤
                    blocked_users.add(user_id)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                    logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text[:100]}...")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await message.answer(
                        "‚õî –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–∞–º –∏–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –∏ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã."
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å–ø–∞–º–µ
                    for admin_id in CONFIG["ADMIN_IDS"]:
                        try:
                            await bot.send_message(
                                admin_id,
                                f"üö´ **–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º**\n\n"
                                f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: `{user_id}`\n"
                                f"**–ü–∞—Ç—Ç–µ—Ä–Ω**: `{pattern}`\n\n"
                                f"**–¢–µ–∫—Å—Ç**:\n```\n{message.text[:300]}...\n```",
                                parse_mode=ParseMode.MARKDOWN
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∞–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
                    return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await func(message, *args, **kwargs)
    return wrapper

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
def safe_execution(f):
    @wraps(f)
    async def wrapped(*args, **kwargs):
        user_id = None
        start_time = time.time()
        success = False
        error_message = None
        model = None
        topic = None
        is_complex = False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        for arg in args:
            if isinstance(arg, Message) and arg.from_user:
                user_id = arg.from_user.id
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if arg.text:
                    topic = detect_question_topic(arg.text)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
                    is_complex = len(arg.text) > 300
                break
            elif isinstance(arg, CallbackQuery) and arg.from_user:
                user_id = arg.from_user.id
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if user_id and str(user_id) in user_settings:
            model = user_settings[str(user_id)].get("model")
        
        try:
            result = await f(*args, **kwargs)
            success = True
            return result
        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            error_context = {
                'function': f.__name__,
                'args': str(args),
                'kwargs': str(kwargs),
                'exception': str(e),
                'traceback': traceback.format_exc()
            }
            
            error_message = str(e)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {f.__name__}: {str(e)}\n{traceback.format_exc()}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –ø–∏—à–µ—Ç..." –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if user_id in thinking_messages and thinking_messages[user_id]:
                try:
                    await bot.delete_message(
                        chat_id=thinking_messages[user_id]["chat_id"],
                        message_id=thinking_messages[user_id]["message_id"]
                    )
                    thinking_messages[user_id] = None
                except Exception:
                    pass
            
            # –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for arg in args:
                if isinstance(arg, Message):
                    try:
                        await arg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    except Exception:
                        pass
                    break
            return None
        finally:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if user_id:
                execution_time = time.time() - start_time
                await bot_metrics.record_request(
                    user_id, success, execution_time, model, topic, 
                    error_message, is_complex=is_complex
                )
    return wrapped

# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏
def format_model_name(model_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    return model_name.split('/')[-1]

def detect_question_topic(text: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    for topic, pattern in TOPIC_PATTERNS.items():
        if re.search(pattern, text):
            return topic
    return None

def get_best_model_for_topic(topic: str) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã."""
    if topic in SPECIALIZED_MODELS and SPECIALIZED_MODELS[topic]:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        import random
        return random.choice(SPECIALIZED_MODELS[topic])
    return None

def clean_markdown(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Markdown –≤ —Ç–µ–∫—Å—Ç–µ."""
    if not text:
        return ""
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–Ω–æ—Å—Ç–∏ Markdown —Å–∏–º–≤–æ–ª–æ–≤
    backticks_count = text.count('`')
    asterisk_count = text.count('*')
    underscore_count = text.count('_')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–∞—Ä–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    if backticks_count % 2 != 0:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞—Ç–Ω—É—é –∫–∞–≤—ã—á–∫—É –∏ —É–¥–∞–ª—è–µ–º –µ—ë
        last_backtick_pos = text.rfind('`')
        if last_backtick_pos != -1:
            text = text[:last_backtick_pos] + text[last_backtick_pos+1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    code_blocks = re.findall(r'```[\s\S]*?```', text)
    for block in code_blocks:
        # –ï—Å–ª–∏ –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if not block.endswith('```'):
            text = text.replace(block, block + '```')
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ```, –Ω–æ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è ```)
    matches = re.finditer(r'```(?:[\s\S]*?)(?!```[\s\S]*?$)', text)
    for match in matches:
        start_pos = match.start()
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –±–ª–æ–∫ –∫–æ–¥–∞ –≤ –∫–æ–Ω–µ—Ü
        text += '\n```'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞/–∂–∏—Ä–Ω–æ–≥–æ
    if asterisk_count % 2 != 0:
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è - —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–≤–µ–∑–¥–æ—á–∫—É
        last_asterisk_pos = text.rfind('*')
        if last_asterisk_pos != -1:
            text = text[:last_asterisk_pos] + text[last_asterisk_pos+1:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–∞—Ä–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∏–≤–∞
    if underscore_count % 2 != 0:
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è - —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        last_underscore_pos = text.rfind('_')
        if last_underscore_pos != -1:
            text = text[:last_underscore_pos] + text[last_underscore_pos+1:]
    
    return text

async def get_cached_response(cache_key: str, max_age: int = None) -> Optional[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        cache_key: –ö–ª—é—á –∫—ç—à–∞
        max_age: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (None = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CONFIG["CACHE_TIMEOUT"])
        
    Returns:
        Dict —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ None –µ—Å–ª–∏ –∫—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
    """
    cache_file = os.path.join(CACHE_DIR, f"{hashlib.md5(cache_key.encode()).hexdigest()}.json")
    
    if not os.path.exists(cache_file):
        return None
        
    try:
        async with aio_open(cache_file, 'r', encoding='utf-8') as f:
            cached_data = json.loads(await f.read())
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
        cache_time = cached_data.get("timestamp", 0)
        max_age = max_age or CONFIG["CACHE_TIMEOUT"]
        
        if time.time() - cache_time > max_age:
            # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª
            return None
            
        return cached_data.get("data")
    except (json.JSONDecodeError, FileNotFoundError, KeyError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞ {cache_key}: {e}")
        return None

async def set_cached_response(cache_key: str, data: Any) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫—ç—à.
    
    Args:
        cache_key: –ö–ª—é—á –∫—ç—à–∞
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    cache_file = os.path.join(CACHE_DIR, f"{hashlib.md5(cache_key.encode()).hexdigest()}.json")
    
    try:
        cache_data = {
            "timestamp": time.time(),
            "data": data
        }
        
        async with aio_open(cache_file, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(cache_data, ensure_ascii=False, indent=2))
            
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞ {cache_key}: {e}")
        return False

async def save_data_to_json(data: Any, filename: str, version: int = None) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)
        version: –í–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    filepath = os.path.join(CONFIG["PERSISTENT_STORAGE"], filename)
    temp_filepath = f"{filepath}.tmp"
    backup_filepath = f"{filepath}.bak"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if isinstance(data, dict) and version is not None:
            data_with_meta = {
                "_meta": {
                    "version": version,
                    "timestamp": datetime.now().isoformat(),
                    "schema_version": 1
                },
                "data": data
            }
        else:
            data_with_meta = data
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        async with aio_open(temp_filepath, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data_with_meta, ensure_ascii=False, indent=2))
        
        # –ó–∞—Ç–µ–º –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –±–µ–∫–∞–ø, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(filepath):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            backup_time = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"{os.path.basename(filepath)}.{backup_time}.bak"
            versioned_backup = os.path.join(BACKUP_DIR, backup_filename)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏ –≤ –±–µ–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–æ–∂–µ
            shutil.copy2(filepath, backup_filepath)
            shutil.copy2(filepath, versioned_backup)
        
        # –ò –Ω–∞–∫–æ–Ω–µ—Ü, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
        os.replace(temp_filepath, filepath)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        await cleanup_old_backups(filename)
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}\n{traceback.format_exc()}")
        return False

async def cleanup_old_backups(filename_pattern: str, max_backups: int = 20):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.
    
    Args:
        filename_pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±—ç–∫–∞–ø–∞—Ö
        max_backups: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        backup_files = glob.glob(os.path.join(BACKUP_DIR, f"{filename_pattern}.*.bak"))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        backup_files.sort(key=os.path.getmtime)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ max_backups
        if len(backup_files) > max_backups:
            files_to_delete = backup_files[:-max_backups]
            for file_path in files_to_delete:
                try:
                    os.remove(file_path)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {file_path}")
                except OSError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø {file_path}: {e}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏

async def load_data_from_json(filename: str, default_data: Any = None) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
    
    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)
        default_data: –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        
    Returns:
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ default_data
    """
    filepath = os.path.join(CONFIG["PERSISTENT_STORAGE"], filename)
    backup_filepath = f"{filepath}.bak"
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        async with aio_open(filepath, 'r', encoding='utf-8') as f:
            data = json.loads(await f.read())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if isinstance(data, dict) and "_meta" in data and "data" in data:
                return data["data"]
            return data
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filename}: {e}. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±–µ–∫–∞–ø–∞.")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞
            if os.path.exists(backup_filepath):
                async with aio_open(backup_filepath, 'r', encoding='utf-8') as f:
                    data = json.loads(await f.read())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if isinstance(data, dict) and "_meta" in data and "data" in data:
                        return data["data"]
                    return data
        except Exception as be:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞ {filename}: {be}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞, –∏—â–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –±—ç–∫–∞–ø –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
            backup_files = glob.glob(os.path.join(BACKUP_DIR, f"{filename}.*.bak"))
            if backup_files:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                backup_files.sort(key=os.path.getmtime, reverse=True)
                async with aio_open(backup_files[0], 'r', encoding='utf-8') as f:
                    data = json.loads(await f.read())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if isinstance(data, dict) and "_meta" in data and "data" in data:
                        return data["data"]
                    return data
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ {filename}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∏—Å—å
        return default_data if default_data is not None else {}

async def save_user_settings():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    await save_data_to_json(user_settings, 'user_settings.json', version=1)

async def load_user_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global user_settings
    user_settings = await load_data_from_json('user_settings.json', {})

    # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    for user_id, settings in user_settings.items():
        if "requests_left" not in settings:
            user_settings[user_id]["requests_left"] = CONFIG["MAX_DAILY_REQUESTS"]
            user_settings[user_id]["last_reset"] = str(date.today())
        if "model" not in settings:
            user_settings[user_id]["model"] = ALL_MODELS[0]
        if "system_prompt" not in settings:
            user_settings[user_id]["system_prompt"] = CONFIG["DEFAULT_SYSTEM_PROMPT"]
        if "temperature" not in settings:
            user_settings[user_id]["temperature"] = CONFIG["TEMPERATURE"]
        if "contexts" not in settings:
            user_settings[user_id]["contexts"] = {}
        # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if "preferred_topics" not in settings:
            user_settings[user_id]["preferred_topics"] = []
        if "last_active" not in settings:
            user_settings[user_id]["last_active"] = str(date.today())
        if "favorite_models" not in settings:
            user_settings[user_id]["favorite_models"] = []
        if "is_premium" not in settings:
            user_settings[user_id]["is_premium"] = False
        if "premium_until" not in settings:
            user_settings[user_id]["premium_until"] = None
        if "language" not in settings:
            user_settings[user_id]["language"] = "ru"
        if "notifications_enabled" not in settings:
            user_settings[user_id]["notifications_enabled"] = True
        if "auto_translate" not in settings:
            user_settings[user_id]["auto_translate"] = False
        if "interface_mode" not in settings:
            user_settings[user_id]["interface_mode"] = "standard"  # standard/advanced
        if "stream_mode" not in settings:
            user_settings[user_id]["stream_mode"] = CONFIG["STREAM_RESPONSES"] # –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤

    await save_user_settings()

async def load_blocked_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global blocked_users
    blocked_data = await load_data_from_json('blocked_users.json', {"users": []})
    blocked_users = set(blocked_data.get("users", []))

async def save_blocked_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await save_data_to_json({"users": list(blocked_users)}, 'blocked_users.json', version=1)

async def save_spam_patterns():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞."""
    await save_data_to_json({"patterns": SPAM_PATTERNS}, 'spam_patterns.json', version=1)

async def load_spam_patterns():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞."""
    global SPAM_PATTERNS
    patterns_data = await load_data_from_json('spam_patterns.json', {"patterns": SPAM_PATTERNS})
    SPAM_PATTERNS = patterns_data.get("patterns", SPAM_PATTERNS)

async def save_user_contexts():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ (int) –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
    serializable_contexts = {str(k): v for k, v in user_contexts.items()}
    await save_data_to_json(serializable_contexts, 'user_contexts.json', version=1)

async def load_user_contexts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global user_contexts
    serialized_contexts = await load_data_from_json('user_contexts.json', {})
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
    user_contexts = {int(k): v for k, v in serialized_contexts.items()}

async def save_model_performance():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π."""
    await save_data_to_json(model_performance, 'model_performance.json', version=1)

async def load_model_performance():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π."""
    global model_performance
    model_performance = await load_data_from_json('model_performance.json', {})
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    for model in ALL_MODELS:
        if model not in model_performance:
            model_performance[model] = {
                "successes": 0,
                "failures": 0,
                "avg_response_time": 0,
                "total_responses": 0,
                "topics": {}
            }
    
    await save_model_performance()

async def load_premium_codes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–º–∏—É–º-–∫–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    global premium_codes
    premium_codes_data = await load_data_from_json('premium_codes.json', {"codes": []})
    premium_codes = set(premium_codes_data.get("codes", []))

async def save_premium_codes():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–º–∏—É–º-–∫–æ–¥—ã –≤ —Ñ–∞–π–ª."""
    await save_data_to_json({"codes": list(premium_codes)}, 'premium_codes.json', version=1)

def generate_premium_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–º–∏—É–º-–∫–æ–¥."""
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    premium_codes.add(code)
    return code

def is_premium_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if user_id in CONFIG["ADMIN_IDS"]:
        return True
        
    if str(user_id) not in user_settings:
        return False
        
    settings = user_settings[str(user_id)]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –∏ –µ–≥–æ —Å—Ä–æ–∫
    if settings.get("is_premium", False):
        premium_until = settings.get("premium_until")
        if premium_until:
            try:
                expiry_date = datetime.fromisoformat(premium_until)
                if expiry_date > datetime.now():
                    return True
                else:
                    # –°—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –∏—Å—Ç–µ–∫
                    settings["is_premium"] = False
            except ValueError:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                settings["is_premium"] = False
        else:
            # –ü—Ä–µ–º–∏—É–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            return True
    
    return False

async def activate_premium(user_id: int, duration_days: int = 30) -> bool:
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        duration_days: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º–∞ –≤ –¥–Ω—è—Ö (0 = –±–µ—Å—Å—Ä–æ—á–Ω–æ)
        
    Returns:
        True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
    
    try:
        user_settings[str(user_id)]["is_premium"] = True
        
        if duration_days > 0:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞
            premium_until = (datetime.now() + timedelta(days=duration_days)).isoformat()
            user_settings[str(user_id)]["premium_until"] = premium_until
        else:
            # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º
            user_settings[str(user_id)]["premium_until"] = None
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id not in CONFIG["PREMIUM_USER_IDS"]:
            CONFIG["PREMIUM_USER_IDS"].append(user_id)
            
        await save_user_settings()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def match_query_with_historical_figure(query: str) -> Optional[Tuple[str, dict]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π."""
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω "–∫—Ç–æ —Ç–∞–∫–æ–π X" –∏–ª–∏ "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ X"
    match = re.search(HISTORICAL_PATTERN, query)
    if match:
        person_name = match.group(2).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ —Ç–∞–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å
        for key, info in HISTORICAL_FIGURES.items():
            if person_name in key or key in person_name:
                return key, info
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    for key, info in HISTORICAL_FIGURES.items():
        if key in query.lower():
            return key, info
    
    return None

async def send_thinking_animation(chat_id: int) -> Optional[int]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –ø–∏—à–µ—Ç..." –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
    if not CONFIG["ENABLE_THINKING_ANIMATION"]:
        return None
        
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–∏
        thinking_text = random.choice(CONFIG["THINKING_MESSAGES"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await bot.send_message(chat_id, thinking_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        thinking_messages[chat_id] = {
            "message_id": message.message_id,
            "chat_id": chat_id,
            "text": thinking_text
        }
        
        return message.message_id
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é 'AI –ø–∏—à–µ—Ç': {e}")
        return None

async def remove_thinking_animation(chat_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –ø–∏—à–µ—Ç..."."""
    if not CONFIG["ENABLE_THINKING_ANIMATION"]:
        return True
        
    if chat_id not in thinking_messages or thinking_messages[chat_id] is None:
        return False
        
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(
            chat_id=thinking_messages[chat_id]["chat_id"],
            message_id=thinking_messages[chat_id]["message_id"]
        )
        
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        thinking_messages[chat_id] = None
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é 'AI –ø–∏—à–µ—Ç': {e}")
        return False

async def show_typing_action(chat_id: int, duration: float = 2.0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."""
    try:
        await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(duration)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {e}")

def get_user_model(user_id: int, message_text: str = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
    
    # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    base_model = user_settings[str(user_id)].get("model", ALL_MODELS[0])
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
    if not message_text:
        return base_model
    
    # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –º–æ–¥–µ–ª–∏
    if len(message_text) > 800:
        for category_name in ["–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ"]:
            category = MODEL_CATEGORIES.get(category_name, [])
            if category:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                return random.choice(category)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
    historical_match = match_query_with_historical_figure(message_text)
    if historical_match:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if "history" in SPECIALIZED_MODELS and SPECIALIZED_MODELS["history"]:
            import random
            return random.choice(SPECIALIZED_MODELS["history"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞
    topic = detect_question_topic(message_text)
    if not topic:
        return base_model
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    preferred_topics = user_settings[str(user_id)].get("preferred_topics", [])
    if topic not in preferred_topics:
        preferred_topics.append(topic)
        if len(preferred_topics) > 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Ç–µ–º
            preferred_topics.pop(0)
        user_settings[str(user_id)]["preferred_topics"] = preferred_topics
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–º—ã
    specialized_model = get_best_model_for_topic(topic)
    if specialized_model:
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {specialized_model} –¥–ª—è —Ç–µ–º—ã {topic}")
        return specialized_model
    
    return base_model

def get_system_prompt(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    if str(user_id) not in user_settings:
        return CONFIG["DEFAULT_SYSTEM_PROMPT"]
    return user_settings[str(user_id)].get("system_prompt", CONFIG["DEFAULT_SYSTEM_PROMPT"])

def get_user_temperature(user_id: int) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ temperature –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    if str(user_id) not in user_settings:
        return CONFIG["TEMPERATURE"]
    return user_settings[str(user_id)].get("temperature", CONFIG["TEMPERATURE"])

def get_user_stream_mode(user_id: int) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–æ–≤."""
    if str(user_id) not in user_settings:
        return CONFIG["STREAM_RESPONSES"]
    return user_settings[str(user_id)].get("stream_mode", CONFIG["STREAM_RESPONSES"])

def get_user_context(user_id: int) -> List[Dict[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    return user_contexts[user_id]

def add_to_user_context(user_id: int, role: str, content: str, importance: float = 1.0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if user_id not in user_contexts:
        user_contexts[user_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏
    user_contexts[user_id].append({
        "role": role, 
        "content": content,
        "timestamp": datetime.now().isoformat(),
        "importance": importance
    })

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_contexts[user_id]) > CONFIG["MAX_CONTEXT_LENGTH"] * 2:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤ –Ω–∞—á–∞–ª–µ)
        system_messages = [msg for msg in user_contexts[user_id] if msg["role"] == "system"]
        other_messages = [msg for msg in user_contexts[user_id] if msg["role"] != "system"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        other_messages.sort(key=lambda x: (x.get("importance", 0), x.get("timestamp", "")), reverse=True)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        keep_count = CONFIG["MAX_CONTEXT_LENGTH"] * 2 - len(system_messages)
        user_contexts[user_id] = system_messages + other_messages[:keep_count]

def clear_user_context(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if user_id in user_contexts:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        system_messages = [msg for msg in user_contexts[user_id] if msg["role"] == "system"]
        user_contexts[user_id] = system_messages if system_messages else []

def update_context_importance(user_id: int, feedback: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    if user_id not in user_contexts or len(user_contexts[user_id]) < 2:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    last_messages = user_contexts[user_id][-2:]
    
    # –î–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å, –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π - —É–º–µ–Ω—å—à–∞–µ–º
    importance_modifier = 1.2 if feedback > 0 else 0.8
    
    for msg in last_messages:
        if "importance" in msg:
            msg["importance"] = msg["importance"] * importance_modifier

def prepare_api_messages(context: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏."""
    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è API
    api_messages = []
    
    for msg in context:
        if "role" in msg and "content" in msg:
            # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API
            api_msg = {"role": msg["role"], "content": msg["content"]}
            api_messages.append(api_msg)
    
    return api_messages

def is_greeting(text: str) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –¥–∞."""
    import random
    for pattern, responses in GREETINGS.items():
        if re.match(pattern, text.strip()):
            return random.choice(responses)
    return None

def record_model_performance(model: str, success: bool, response_time: float, topic: Optional[str] = None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."""
    if model not in model_performance:
        model_performance[model] = {
            "successes": 0,
            "failures": 0,
            "avg_response_time": 0,
            "total_responses": 0,
            "topics": {}
        }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = model_performance[model]
    if success:
        stats["successes"] += 1
    else:
        stats["failures"] += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    total_responses = stats["total_responses"]
    if total_responses > 0:
        current_avg = stats["avg_response_time"]
        stats["avg_response_time"] = (current_avg * total_responses + response_time) / (total_responses + 1)
    else:
        stats["avg_response_time"] = response_time
    
    stats["total_responses"] += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞
    if topic:
        if topic not in stats["topics"]:
            stats["topics"][topic] = {"successes": 0, "failures": 0}
        
        topic_stats = stats["topics"][topic]
        if success:
            topic_stats["successes"] += 1
        else:
            topic_stats["failures"] += 1

def record_request_stat(user_id: int, success: bool, model: str, topic: Optional[str] = None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in request_stats:
        request_stats[user_id] = {
            "total": 0,
            "successful": 0,
            "failed": 0,
            "models": {},
            "topics": {}
        }
    
    stats = request_stats[user_id]
    stats["total"] += 1
    
    if success:
        stats["successful"] += 1
    else:
        stats["failed"] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
    if model not in stats["models"]:
        stats["models"][model] = {"count": 0, "successful": 0, "failed": 0}
    
    model_stats = stats["models"][model]
    model_stats["count"] += 1
    if success:
        model_stats["successful"] += 1
    else:
        model_stats["failed"] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
    if topic:
        if topic not in stats["topics"]:
            stats["topics"][topic] = {"count": 0, "successful": 0, "failed": 0}
        
        topic_stats = stats["topics"][topic]
        topic_stats["count"] += 1
        if success:
            topic_stats["successful"] += 1
        else:
            topic_stats["failed"] += 1

def get_historical_figure_response(figure_key: str, info: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏."""
    response = f"# {info['full_name']} ({info['years']})\n\n"
    response += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è**: {info['category']}\n\n"
    response += f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {info['description']}\n\n"
    
    if "works" in info:
        response += "**–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è**:\n"
        for i, work in enumerate(info["works"], 1):
            response += f"{i}. {work}\n"
    
    if "discoveries" in info:
        response += "**–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è**:\n"
        for i, discovery in enumerate(info["discoveries"], 1):
            response += f"{i}. {discovery}\n"
    
    return response

async def create_backup_zip():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP."""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"backup_{timestamp}.zip"
        backup_path = os.path.join(BACKUP_DIR, backup_filename)
        
        # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ DATA_DIR
            for root, _, files in os.walk(DATA_DIR):
                for file in files:
                    if file.endswith('.json'):
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, DATA_DIR)
                        zipf.write(file_path, arcname)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        backups = glob.glob(os.path.join(BACKUP_DIR, "backup_*.zip"))
        backups.sort(key=os.path.getmtime)
        if len(backups) > 5:
            for old_backup in backups[:-5]:
                os.remove(old_backup)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö: {backup_filename}")
        return backup_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        return None

def generate_error_report(error_info: Dict[str, Any], include_logs: bool = True) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    report = f"üö® **–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ**\n\n"
    report += f"**–í—Ä–µ–º—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    report += f"**–í–µ—Ä—Å–∏—è –±–æ—Ç–∞**: {BOT_VERSION}\n\n"
    
    report += f"**–§—É–Ω–∫—Ü–∏—è**: {error_info.get('function', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    report += f"**–û—à–∏–±–∫–∞**: {error_info.get('exception', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º Traceback –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
    traceback_text = error_info.get('traceback', '')
    if traceback_text:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É traceback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        max_traceback_length = 1000
        if len(traceback_text) > max_traceback_length:
            traceback_text = traceback_text[:max_traceback_length] + "...[—Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
        report += f"**Traceback**:\n```\n{traceback_text}\n```\n\n"
    
    report += f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: {len(bot_metrics.active_users)}\n"
    report += f"**–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**: {bot_metrics.requests_total}\n"
    
    return report

@safe_execution
async def process_image(photo: PhotoSize) -> Optional[str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ base64 –∫–æ–¥–∏—Ä–æ–≤–∫–µ."""
    try:
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path

        if file_info.file_size > CONFIG["MAX_FILE_SIZE"]:
            return None

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
        file_url = f"https://api.telegram.org/file/bot{CONFIG['TOKEN']}/{file_path}"
        
        async with http_session.get(file_url, timeout=CONFIG["REQUEST_TIMEOUT"]) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: HTTP {response.status}")
                return None
                
            response_content = await response.read()

        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
        file_content = base64.b64encode(response_content).decode('utf-8')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_extension = file_path.split('.')[-1].lower()
        if file_extension not in CONFIG["ALLOWED_FORMATS"]:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_extension}")
            return None

        return f"data:image/{file_extension};base64,{file_content}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

@safe_execution
async def split_and_send_message(message: Message, text: str, parse_mode: Optional[str] = ParseMode.MARKDOWN):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö."""
    max_length = CONFIG["MAX_MESSAGE_LENGTH"]

    # –û—á–∏—â–∞–µ–º Markdown –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if parse_mode == ParseMode.MARKDOWN:
        text = clean_markdown(text)

    if len(text) <= max_length:
        try:
            return await message.answer(text, parse_mode=parse_mode)
        except TelegramAPIError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                return await message.answer(text, parse_mode=None)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
                return None
        return None

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    parts = []
    current_part = ""
    code_block = False

    for line in text.split('\n'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–æ–º –∏–ª–∏ –∫–æ–Ω—Ü–æ–º –±–ª–æ–∫–∞ –∫–æ–¥–∞
        if line.strip().startswith('```') and line.strip().count('```') % 2 != 0:
            code_block = not code_block

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å + —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if len(current_part + line + '\n') <= max_length:
            current_part += line + '\n'
        else:
            # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä—ã–≤–æ–º
            if code_block:
                current_part += '```\n'
                parts.append(current_part)
                current_part = '```' + line.split('```', 1)[-1] + '\n'
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                if line.strip().count('```') % 2 != 0:
                    code_block = not code_block
            else:
                parts.append(current_part)
                current_part = line + '\n'

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    last_message = None
    for i, part in enumerate(parts):
        try:
            last_message = await message.answer(part, parse_mode=parse_mode)
        except TelegramAPIError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                last_message = await message.answer(part, parse_mode=None)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
        await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    return last_message

@safe_execution
async def stream_and_send_response(message: Message, text: str, parse_mode: Optional[str] = ParseMode.MARKDOWN) -> Optional[Message]:
    """–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if len(text) < 200:
        return await message.answer(text, parse_mode=parse_mode)
    
    # –û—á–∏—â–∞–µ–º Markdown –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if parse_mode == ParseMode.MARKDOWN:
        text = clean_markdown(text)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    # (–∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é)
    tokens = []
    if len(text) > 4000:  # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏
        tokens = [text[i:i+100] for i in range(0, len(text), 100)]
    else:
        tokens = [text[i:i+30] for i in range(0, len(text), 30)]
    
    if not tokens:
        return await message.answer(text, parse_mode=parse_mode)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    try:
        current_message = await message.answer(tokens[0], parse_mode=parse_mode)
    except TelegramAPIError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏: {e}")
        return await message.answer(text, parse_mode=None)
    
    current_text = tokens[0]
    
    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for i in range(1, len(tokens)):
        try:
            current_text += tokens[i]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π 2-3 —Ç–æ–∫–µ–Ω (–Ω–µ –∫–∞–∂–¥—ã–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã API)
            if i % 3 == 0 or i == len(tokens) - 1:
                await current_message.edit_text(current_text, parse_mode=parse_mode)
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
                await asyncio.sleep(0.2)
        except TelegramAPIError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if "message is too long" in str(e).lower() or "message to edit not found" in str(e).lower():
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                    rest_of_text = text[len(current_text):]
                    if rest_of_text:
                        current_message = await message.answer(rest_of_text, parse_mode=parse_mode)
                        current_text = rest_of_text
                except Exception as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: {e2}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    return await split_and_send_message(message, text, parse_mode)
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await current_message.edit_text(current_text, parse_mode=None)
                except Exception:
                    pass
    
    return current_message

async def create_model_selection_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category in MODEL_CATEGORIES:
        builder.row(
            InlineKeyboardButton(
                text=f"üìö {category} ({len(MODEL_CATEGORIES[category])})",
                callback_data=f"category:{category}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    builder.row(
        InlineKeyboardButton(
            text="üîç –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é",
            callback_data="enter_model_manually"
        )
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    builder.row(
        InlineKeyboardButton(
            text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏",
            callback_data="favorite_models"
        )
    )

    return builder.as_markup()

async def create_favorite_models_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    builder = InlineKeyboardBuilder()
    
    favorite_models = user_settings.get(str(user_id), {}).get("favorite_models", [])
    
    for model in favorite_models:
        builder.row(
            InlineKeyboardButton(
                text=format_model_name(model),
                callback_data=f"model:{model}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        )
    )
    
    return builder.as_markup()

async def create_category_models_keyboard(category: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for model in MODEL_CATEGORIES.get(category, []):
        builder.row(
            InlineKeyboardButton(
                text=format_model_name(model),
                callback_data=f"model:{model}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_categories"
        )
    )

    return builder.as_markup()

async def create_temperature_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è temperature."""
    builder = InlineKeyboardBuilder()

    # –ó–Ω–∞—á–µ–Ω–∏—è temperature –æ—Ç 0.0 –¥–æ 1.0 —Å —à–∞–≥–æ–º 0.2
    values = [
        ("0.0 (–ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ)", "0.0"),
        ("0.2 (–¢–æ—á–Ω–æ)", "0.2"),
        ("0.4 (–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ)", "0.4"),
        ("0.6 (–¢–≤–æ—Ä—á–µ—Å–∫–∏)", "0.6"),
        ("0.8 (–ë–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏)", "0.8"),
        ("1.0 (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏)", "1.0")
    ]

    for label, value in values:
        builder.row(
            InlineKeyboardButton(
                text=label,
                callback_data=f"temp:{value}"
            )
        )

    return builder.as_markup()

async def create_feedback_keyboard(message_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üëç –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç", callback_data=f"feedback:good:{message_id}"),
        InlineKeyboardButton(text="üëé –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"feedback:bad:{message_id}")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"rephrase:{message_id}"),
        InlineKeyboardButton(text="üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"elaborate:{message_id}")
    )
    
    return builder.as_markup()

async def create_file_processing_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞."""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìÑ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="file_process:analyze_text")
    )
    
    builder.row(
        InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", callback_data="file_process:analyze_data")
    )
    
    builder.row(
        InlineKeyboardButton(text="üîç –ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="file_process:extract_info")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="file_process:cancel")
    )
    
    return builder.as_markup()

async def create_stream_mode_keyboard(current_mode: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    
    current_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if current_mode else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    
    builder.row(
        InlineKeyboardButton(
            text=f"–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º: {current_text}",
            callback_data="stream_info"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –í–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º" if not current_mode else "üîÑ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º",
            callback_data=f"toggle_stream:{not current_mode}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data="back_to_settings"
        )
    )
    
    return builder.as_markup()

async def create_admin_spam_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–º."""
    builder = InlineKeyboardBuilder()
    
    current_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if CONFIG["ENABLE_SPAM_PROTECTION"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    
    builder.row(
        InlineKeyboardButton(
            text=f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: {current_status}",
            callback_data="spam_status"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É" if not CONFIG["ENABLE_SPAM_PROTECTION"] else "üîÑ –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É",
            callback_data=f"toggle_spam:{not CONFIG['ENABLE_SPAM_PROTECTION']}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω",
            callback_data="add_spam_pattern"
        ),
        InlineKeyboardButton(
            text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            callback_data="view_spam_patterns"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"üë• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_users)}",
            callback_data="view_blocked_users"
        ),
        InlineKeyboardButton(
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–ª–æ–∫-–ª–∏—Å—Ç",
            callback_data="clear_blocked_users"
        )
    )
    
    return builder.as_markup()

@safe_execution
@with_retry(max_retries=3, delay=1.0, backoff=2.0)
async def get_ai_response(user_id: int, message_text: str, image_data: Optional[str] = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ—Å –ª–∏ —ç—Ç–æ –æ–± –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
    historical_match = match_query_with_historical_figure(message_text)
    if historical_match:
        figure_key, info = historical_match
        return get_historical_figure_response(figure_key, info)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    topic = detect_question_topic(message_text)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å
    model = get_user_model(user_id, message_text)
    system_prompt = get_system_prompt(user_id)
    temperature = get_user_temperature(user_id)

    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
    is_complex_query = len(message_text) > 300
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (–¥–ª—è –Ω–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
    if not is_complex_query:
        cache_key = f"{model}:{message_text}:{temperature}"
        cached_response = await get_cached_response(cache_key)
        if cached_response:
            return cached_response

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context = get_user_context(user_id)

    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not context:
        add_to_user_context(user_id, "system", system_prompt)
        context = get_user_context(user_id)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = {"role": "user", "content": message_text}

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if image_data:
        user_message = {
            "role": "user",
            "content": [
                {"type": "text", "text": message_text},
                {"type": "image_url", "image_url": {"url": image_data}}
            ]
        }

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    add_to_user_context(user_id, "user", message_text)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
    api_messages = prepare_api_messages(context)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    payload = {
        "model": model,
        "messages": api_messages,
        "temperature": temperature,
        "max_tokens": CONFIG["MAX_TOKENS"]
    }

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    start_time = time.time()
    for attempt in range(CONFIG["RETRY_ATTEMPTS"]):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –≤–º–µ—Å—Ç–æ requests –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with http_session.post(
                f"{CONFIG['API_URL']}/chat/completions",
                headers={"Authorization": f"Bearer {CONFIG['API_KEY']}"},
                json=payload,
                timeout=aiohttp.ClientTimeout(total=CONFIG["REQUEST_TIMEOUT"])
            ) as response:
                if response.status != 200:
                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                    if attempt == CONFIG["RETRY_ATTEMPTS"] - 1 or not CONFIG["FALLBACK_MODE"]:
                        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (HTTP {response.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                    record_model_performance(model, False, time.time() - start_time, topic)
                    record_request_stat(user_id, False, model, topic)
                    
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
                    available_models = [m for m in ALL_MODELS if m != model]
                    if available_models:
                        import random
                        model = random.choice(available_models)
                        payload["model"] = model
                        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª—å: {model}")
                        continue
                    else:
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—â—É—é –º–æ–¥–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
                data = await response.json()

                if 'choices' in data and data['choices']:
                    ai_response = data['choices'][0]['message']['content']
                    response_time = time.time() - start_time

                    # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
                    if not is_complex_query:
                        await set_cached_response(cache_key, ai_response)

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    add_to_user_context(user_id, "assistant", ai_response)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                    record_model_performance(model, True, response_time, topic)
                    record_request_stat(user_id, True, model, topic)

                    return ai_response
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
                    if attempt == CONFIG["RETRY_ATTEMPTS"] - 1:
                        return "‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
            record_model_performance(model, False, CONFIG["REQUEST_TIMEOUT"], topic)
            record_request_stat(user_id, False, model, topic)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if attempt == CONFIG["RETRY_ATTEMPTS"] - 1:
                return "‚ùå –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É AI –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å."
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
            if CONFIG["FALLBACK_MODE"]:
                # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
                fastest_models = sorted(
                    [(m, model_performance[m]["avg_response_time"]) for m in model_performance if m != model],
                    key=lambda x: x[1]
                )
                
                if fastest_models:
                    model = fastest_models[0][0]
                    payload["model"] = model
                    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å: {model}")
                    continue
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@safe_execution
async def rephrase_answer(user_id: int, original_text: str, instruction: str) -> str:
    """–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π."""
    model = get_user_model(user_id)
    temperature = get_user_temperature(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    rephrase_prompt = f"{instruction}:\n\n{original_text}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    context = get_user_context(user_id)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    api_messages = prepare_api_messages(context)
    api_messages.append({"role": "user", "content": rephrase_prompt})
    
    payload = {
        "model": model,
        "messages": api_messages,
        "temperature": temperature,
        "max_tokens": CONFIG["MAX_TOKENS"]
    }
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –≤–º–µ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ requests
        async with http_session.post(
            f"{CONFIG['API_URL']}/chat/completions",
            headers={"Authorization": f"Bearer {CONFIG['API_KEY']}"},
            json=payload,
            timeout=aiohttp.ClientTimeout(total=CONFIG["REQUEST_TIMEOUT"])
        ) as response:
            if response.status != 200:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (HTTP {response.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            data = await response.json()
            
            if 'choices' in data and data['choices']:
                return data['choices'][0]['message']['content']
            else:
                return "‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:100]}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."

async def process_file(user_id: int, file_id: str, file_name: str, process_type: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram Bot API
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{CONFIG['TOKEN']}/{file_path}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with http_session.get(file_url, timeout=aiohttp.ClientTimeout(total=CONFIG["REQUEST_TIMEOUT"])) as response:
            if response.status != 200:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (HTTP {response.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            response_content = await response.read()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        user_media_path = os.path.join(USER_MEDIA_DIR, str(user_id))
        os.makedirs(user_media_path, exist_ok=True)
        
        local_file_path = os.path.join(user_media_path, file_name)
        async with aio_open(local_file_path, 'wb') as f:
            await f.write(response_content)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        file_extension = os.path.splitext(file_name)[1].lower()
        file_content = None
        
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if file_extension in ['.txt', '.md', '.csv', '.json', '.html', '.xml', '.py', '.js', '.css']:
            try:
                async with aio_open(local_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    file_content = await f.read()
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    max_content_length = 20000 # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                    if len(file_content) > max_content_length:
                        file_content = file_content[:max_content_length] + f"\n\n[–§–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_content_length} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(file_content)}]"
            except UnicodeDecodeError:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª '{file_name}' –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        prompt = ""
        if process_type == "analyze_text":
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª '{file_name}' –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏:\n\n{file_content}"
        elif process_type == "analyze_data":
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}' –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥—ã. –ü—Ä–∏–≤–µ–¥–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ —Å–µ–∫—Ü–∏—è–º:\n\n{file_content}"
        elif process_type == "extract_info":
            prompt = f"–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}' –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫—É—é –∫–∞–∫ –¥–∞—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã, –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –µ—ë –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –û—Ä–≥–∞–Ω–∏–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∏:\n\n{file_content}"
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞."
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not file_content:
            return f"‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (TXT, MD, CSV, JSON –∏ —Ç.–¥.)."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        model = get_user_model(user_id)
        temperature = get_user_temperature(user_id)
        
        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."},
                {"role": "user", "content": prompt}
            ],
            "temperature": temperature,
            "max_tokens": CONFIG["MAX_TOKENS"]
        }
        
        async with http_session.post(
            f"{CONFIG['API_URL']}/chat/completions",
            headers={"Authorization": f"Bearer {CONFIG['API_KEY']}"},
            json=payload,
            timeout=aiohttp.ClientTimeout(total=CONFIG["REQUEST_TIMEOUT"] * 2)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        ) as response:
            if response.status != 200:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ (HTTP {response.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            data = await response.json()
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            os.remove(local_file_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_file_path}: {e}")
            
        if 'choices' in data and data['choices']:
            result = data['choices'][0]['message']['content']
            return result
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}\n{traceback.format_exc()}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)[:100]}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def verify_bot_startup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    try:
        me = await bot.get_me()
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É: @{me.username} (ID: {me.id})")
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    dirs_to_check = [DATA_DIR, LOG_DIR, CACHE_DIR, BACKUP_DIR, USER_MEDIA_DIR, STATS_DIR]
    for dir_path in dirs_to_check:
        if not os.path.exists(dir_path) or not os.access(dir_path, os.W_OK):
            issues.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
    if not CONFIG["API_KEY"] or len(CONFIG["API_KEY"]) < 20:
        issues.append("API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –≤–µ–±—Ö—É–∫–∞
    if CONFIG["USE_WEBHOOK"]:
        if not APP_URL or not APP_URL.startswith("http"):
            issues.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è webhook: {APP_URL}")
    
    # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    if issues:
        logger.warning("–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            logger.warning(f" - {issue}")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in CONFIG["ADMIN_IDS"]:
            try:
                issue_text = "\n".join([f"- {issue}" for issue in issues])
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n\n{issue_text}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
    return len(issues) == 0

async def perform_health_check():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            api_health = True
            try:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                async with http_session.get(
                    f"{CONFIG['API_URL']}/health",
                    headers={"Authorization": f"Bearer {CONFIG['API_KEY']}"},
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status != 200:
                        api_health = False
                        logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}")
            except Exception as e:
                api_health = False
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
            disk_health = True
            try:
                total, used, free = shutil.disk_usage(DATA_DIR)
                disk_percent_used = used / total * 100
                
                if disk_percent_used > 95:  # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–æ –±–æ–ª–µ–µ 95% –¥–∏—Å–∫–∞
                    disk_health = False
                    logger.warning(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent_used:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {e}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            if not (api_health and disk_health):
                for admin_id in CONFIG["ADMIN_IDS"]:
                    try:
                        message = "‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n\n"
                        if not api_health:
                            message += "- API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É\n"
                        if not disk_health:
                            message += f"- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_percent_used:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
                        
                        await bot.send_message(admin_id, message)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å
            if datetime.now().hour == 3:  # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏
                backup_path = await create_backup_zip()
                if backup_path:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞
                    for admin_id in CONFIG["ADMIN_IDS"]:
                        try:
                            await bot.send_message(
                                admin_id, 
                                f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(backup_path)}"
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ç–∫–∞–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        await asyncio.sleep(CONFIG["HEALTH_CHECK_INTERVAL"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(CommandStart())
@safe_execution
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = message.from_user.first_name
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"))
    keyboard.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.add(KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"))
    keyboard.add(KeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))
    keyboard.adjust(2)

    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        f"ü§ñ –Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
        f"üîç –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏\n"
        f"‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–¥–∞\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π)\n"
        f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–æ–≤\n\n"
        f"üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )

    await message.answer(
        welcome_text,
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
        await save_user_settings()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user_settings[str(user_id)]["last_active"] = str(date.today())
    await save_user_settings()

@router.message(Command("help"))
@safe_execution
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞."""
    help_text = (
        "üîç **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/newchat - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "/models - –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å\n"
        "/prompt - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/resetprompt - –°–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/temp - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (temperature)\n"
        "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/premium - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º\n"
        "/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "/stream - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üìù **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Markdown –¥–ª—è –∫–æ–¥–∞ –∏ —Ç–µ–∫—Å—Ç–∞:\n"
        "```\n# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n**–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n*–∫—É—Ä—Å–∏–≤*\n`–∫–æ–¥`\n```\n"
        "üìä **–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
        "\n\nüß† **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å:**\n"
        "–ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ—ë –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        "\n\nüîÑ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:**\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."
        "\n\nüìÑ **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        "\n\n‚ö° **–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º:**\n"
        "–í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
    )

    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

@router.message(Command("settings"))
@safe_execution
async def cmd_settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
        await save_user_settings()

    settings = user_settings[str(user_id)]
    model = settings.get("model", ALL_MODELS[0])
    system_prompt = settings.get("system_prompt", CONFIG["DEFAULT_SYSTEM_PROMPT"])
    temperature = settings.get("temperature", CONFIG["TEMPERATURE"])
    stream_mode = settings.get("stream_mode", CONFIG["STREAM_RESPONSES"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å
    premium_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    if settings.get("is_premium", False):
        premium_until = settings.get("premium_until")
        if premium_until:
            try:
                expiry_date = datetime.fromisoformat(premium_until)
                if expiry_date > datetime.now():
                    days_left = (expiry_date - datetime.now()).days
                    premium_status = f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (–µ—â–µ {days_left} –¥–Ω.)"
                else:
                    premium_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω (–∏—Å—Ç–µ–∫)"
                    settings["is_premium"] = False
                    await save_user_settings()
            except ValueError:
                premium_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        else:
            premium_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (–±–µ—Å—Å—Ä–æ—á–Ω–æ)"
    else:
        premium_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    requests_info = ""
    if not is_premium_user(user_id):
        requests_left = settings.get("requests_left", 0)
        requests_info = f"\n\nüî¢ **–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** `{requests_left}`"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model"))
    keyboard.row(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="change_prompt"))
    keyboard.row(InlineKeyboardButton(text="üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="change_temp"))
    keyboard.row(InlineKeyboardButton(text="‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞", callback_data="stream_settings"))
    keyboard.row(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="new_chat"))
    
    if not is_premium_user(user_id):
        keyboard.row(InlineKeyboardButton(text="‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="activate_premium"))

    settings_text = (
        "‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
        f"ü§ñ **–ú–æ–¥–µ–ª—å:** `{format_model_name(model)}`\n\n"
        f"üå°Ô∏è **–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:** `{temperature}`\n\n"
        f"‚ö° **–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if stream_mode else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        f"‚≠ê **–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å:** {premium_status}\n\n"
        f"üìù **–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n```\n{system_prompt}\n```" + requests_info
    )

    await message.answer(settings_text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard.as_markup())

@router.message(Command("models"))
@safe_execution
async def cmd_models(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    await state.set_state(UserStates.waiting_for_model_selection)

    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
        reply_markup=await create_model_selection_keyboard()
    )

@router.message(Command("prompt"))
@safe_execution
async def cmd_prompt(message: Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–¥–∞—Ç—å —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."""
    await state.set_state(UserStates.custom_system_prompt)

    current_prompt = get_system_prompt(message.from_user.id)

    await message.answer(
        f"üìù –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```\n{current_prompt}\n```\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ. "
        "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –æ —Ç–æ–º, –∫–∞–∫ –µ–º—É —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.",
        parse_mode=ParseMode.MARKDOWN
    )

@router.message(Command("resetprompt"))
@safe_execution
async def cmd_reset_prompt(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    user_id = message.from_user.id

    if str(user_id) in user_settings:
        user_settings[str(user_id)]["system_prompt"] = CONFIG["DEFAULT_SYSTEM_PROMPT"]
        await save_user_settings()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id in user_contexts:
        # –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, msg in enumerate(user_contexts[user_id]):
            if msg.get("role") == "system":
                user_contexts[user_id][i]["content"] = CONFIG["DEFAULT_SYSTEM_PROMPT"]
                break
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        else:
            user_contexts[user_id].insert(0, {
                "role": "system", 
                "content": CONFIG["DEFAULT_SYSTEM_PROMPT"],
                "importance": 1.0,
                "timestamp": datetime.now().isoformat()
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await save_user_contexts()

    await message.answer(
        "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        parse_mode=ParseMode.MARKDOWN
    )

@router.message(Command("temp"))
@safe_execution
async def cmd_temperature(message: Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä temperature."""
    await state.set_state(UserStates.waiting_for_temperature)

    current_temp = get_user_temperature(message.from_user.id)

    await message.answer(
        f"üå°Ô∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (temperature): **{current_temp}**\n\n"
        "–ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏, "
        "–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_temperature_keyboard()
    )

@router.message(Command("stream"))
@safe_execution
async def cmd_stream(message: Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤."""
    user_id = message.from_user.id
    
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
    
    current_mode = user_settings[str(user_id)].get("stream_mode", CONFIG["STREAM_RESPONSES"])
    
    await message.answer(
        "‚ö° **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        "–í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_stream_mode_keyboard(current_mode)
    )

@router.message(Command("newchat"))
@safe_execution
async def cmd_new_chat(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –æ—á–∏—â–∞—è –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    user_id = message.from_user.id
    clear_user_context(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    system_prompt = get_system_prompt(user_id)
    add_to_user_context(user_id, "system", system_prompt)

    await message.answer(
        "üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –í—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —Å —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å."
    )

@router.message(Command("premium"))
@safe_execution
async def cmd_premium(message: Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if is_premium_user(user_id):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞
        premium_until = user_settings.get(str(user_id), {}).get("premium_until")
        if premium_until:
            try:
                expiry_date = datetime.fromisoformat(premium_until)
                days_left = (expiry_date - datetime.now()).days
                await message.answer(
                    f"‚≠ê –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º!\n\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –µ—â–µ {days_left} –¥–Ω–µ–π.\n\n"
                    f"–ü—Ä–µ–º–∏—É–º –¥–∞–µ—Ç –≤–∞–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
                )
            except ValueError:
                await message.answer(
                    "‚≠ê –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º!\n\n"
                    "–ü—Ä–µ–º–∏—É–º –¥–∞–µ—Ç –≤–∞–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
                )
        else:
            await message.answer(
                "‚≠ê –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º!\n\n"
                "–ü—Ä–µ–º–∏—É–º –¥–∞–µ—Ç –≤–∞–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
            )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    await state.set_state(UserStates.waiting_for_premium_code)
    
    await message.answer(
        "‚≠ê –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
        "–ü—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º –¥–∞–µ—Ç –≤–∞–º:\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–∏–±–æ–ª–µ–µ –º–æ—â–Ω—ã–º –º–æ–¥–µ–ª—è–º\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
    )

@router.message(Command("upload"))
@safe_execution
async def cmd_upload(message: Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    await message.answer(
        "üìÑ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        "1) –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é\n"
        "2) –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å–∫—Ä–µ–ø–∫–∏ üìé\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TXT, MD, CSV, JSON, HTML, XML, PY, JS, CSS –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞."
    )

@router.message(Command("spamfilter"))
@admin_only
@safe_execution
async def cmd_spam_filter(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    await message.answer(
        "üö´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞**\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_admin_spam_keyboard()
    )

@router.callback_query(lambda c: c.data == "new_chat")
@safe_execution
async def callback_new_chat(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"."""
    user_id = callback.from_user.id
    clear_user_context(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    system_prompt = get_system_prompt(user_id)
    add_to_user_context(user_id, "system", system_prompt)

    await callback.message.answer(
        "üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –í—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —Å —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å."
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "change_model")
@safe_execution
async def callback_change_model(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏."""
    await state.set_state(UserStates.waiting_for_model_selection)

    await callback.message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
        reply_markup=await create_model_selection_keyboard()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "change_prompt")
@safe_execution
async def callback_change_prompt(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    await state.set_state(UserStates.custom_system_prompt)

    current_prompt = get_system_prompt(callback.from_user.id)

    await callback.message.answer(
        f"üìù –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n```\n{current_prompt}\n```\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ. "
        "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI –æ —Ç–æ–º, –∫–∞–∫ –µ–º—É —Å–ª–µ–¥—É–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "change_temp")
@safe_execution
async def callback_change_temp(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."""
    await state.set_state(UserStates.waiting_for_temperature)

    current_temp = get_user_temperature(callback.from_user.id)

    await callback.message.answer(
        f"üå°Ô∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (temperature): **{current_temp}**\n\n"
        "–ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏, "
        "–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_temperature_keyboard()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "stream_settings")
@safe_execution
async def callback_stream_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    user_id = callback.from_user.id
    
    current_mode = user_settings.get(str(user_id), {}).get("stream_mode", CONFIG["STREAM_RESPONSES"])
    
    await callback.message.answer(
        "‚ö° **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        "–í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_stream_mode_keyboard(current_mode)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_settings")
@safe_execution
async def callback_back_to_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
    await cmd_settings(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("toggle_stream:"))
@safe_execution
async def callback_toggle_stream(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    user_id = callback.from_user.id
    new_mode = callback.data.split(":", 1)[1] == "True"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) in user_settings:
        user_settings[str(user_id)]["stream_mode"] = new_mode
        await save_user_settings()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚ö° **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–æ–≤**\n\n"
        f"–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}.\n\n"
        "–í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_stream_mode_keyboard(new_mode)
    )
    await callback.answer(f"–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

@router.callback_query(lambda c: c.data == "stream_info")
@safe_execution
async def callback_stream_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
    await callback.answer(
        "–í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ –µ–≥–æ –ø–µ—á–∞—Ç–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫. "
        "–≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å —á–∏—Ç–∞—Ç—å, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", 
        show_alert=True
    )

@router.callback_query(lambda c: c.data == "spam_status")
@admin_only
@safe_execution
async def callback_spam_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞."""
    await callback.answer(
        f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if CONFIG['ENABLE_SPAM_PROTECTION'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}. "
        f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∞–º–∞: {bot_metrics.spam_blocked}. "
        f"–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {len(blocked_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        show_alert=True
    )

@router.callback_query(lambda c: c.data.startswith("toggle_spam:"))
@admin_only
@safe_execution
async def callback_toggle_spam(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞."""
    new_state = callback.data.split(":", 1)[1] == "True"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    CONFIG["ENABLE_SPAM_PROTECTION"] = new_state
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        "üö´ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞**\n\n"
        f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=await create_admin_spam_keyboard()
    )
    await callback.answer(f"–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

@router.callback_query(lambda c: c.data == "add_spam_pattern")
@admin_only
@safe_execution
async def callback_add_spam_pattern(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
    await state.set_state(UserStates.waiting_for_spam_pattern)
    
    await callback.message.answer(
        "üîç **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: `(?i)–∑–∞—Ä–∞–±–æ—Ç[–∞-—è]+ –¥–µ–Ω—å–≥–∏`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "view_spam_patterns")
@admin_only
@safe_execution
async def callback_view_spam_patterns(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
    patterns_text = "üîç **–¢–µ–∫—É—â–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã:**\n\n"
    
    for i, pattern in enumerate(SPAM_PATTERNS, 1):
        patterns_text += f"{i}. `{pattern}`\n"
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(patterns_text) > 4000:
        parts = [patterns_text[i:i+4000] for i in range(0, len(patterns_text), 4000)]
        for part in parts:
            await callback.message.answer(part, parse_mode=ParseMode.MARKDOWN)
    else:
        await callback.message.answer(patterns_text, parse_mode=ParseMode.MARKDOWN)
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "view_blocked_users")
@admin_only
@safe_execution
async def callback_view_blocked_users(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not blocked_users:
        await callback.message.answer("üë• –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        await callback.answer()
        return
    
    users_text = "üë• **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
    for i, user_id in enumerate(blocked_users, 1):
        users_text += f"{i}. `{user_id}`\n"
    
    await callback.message.answer(users_text, parse_mode=ParseMode.MARKDOWN)
    await callback.answer()

@router.callback_query(lambda c: c.data == "clear_blocked_users")
@admin_only
@safe_execution
async def callback_clear_blocked_users(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global blocked_users
    blocked_users.clear()
    await save_blocked_users()
    
    await callback.message.answer("üßπ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω.")
    await callback.answer()

@router.callback_query(lambda c: c.data == "activate_premium")
@safe_execution
async def callback_activate_premium(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if is_premium_user(user_id):
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º!")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    await state.set_state(UserStates.waiting_for_premium_code)
    
    await callback.message.answer(
        "‚≠ê –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
        "–ü—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º –¥–∞–µ—Ç –≤–∞–º:\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–∏–±–æ–ª–µ–µ –º–æ—â–Ω—ã–º –º–æ–¥–µ–ª—è–º\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("category:"))
@safe_execution
async def callback_select_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π."""
    category = callback.data.split(":", 1)[1]

    await callback.message.edit_text(
        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª:",
        reply_markup=await create_category_models_keyboard(category)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_categories")
@safe_execution
async def callback_back_to_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"."""
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
        reply_markup=await create_model_selection_keyboard()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "favorite_models")
@safe_execution
async def callback_favorite_models(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"."""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    favorite_models = user_settings.get(str(user_id), {}).get("favorite_models", [])
    
    if not favorite_models:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await callback.message.edit_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
            reply_markup=await create_model_selection_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:",
        reply_markup=await create_favorite_models_keyboard(user_id)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "enter_model_manually")
@safe_execution
async def callback_enter_model_manually(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é."""
    await state.set_state(UserStates.waiting_for_direct_model)
    
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `provider/model-name`.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `meta-llama/Llama-3.3-70B-Instruct` –∏–ª–∏ `Qwen/QwQ-32B`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("file_process:"))
@safe_execution
async def callback_file_processing(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞."""
    user_id = callback.from_user.id
    process_type = callback.data.split(":", 1)[1]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
    if process_type == "cancel":
        await state.clear()
        await callback.message.edit_text("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    file_id = data.get("file_id")
    file_name = data.get("file_name")
    
    if not file_id or not file_name:
        await callback.message.edit_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —É—Ç–µ—Ä—è–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.edit_text(
        f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ '{file_name}'...\n\n"
        f"–¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: {process_type.replace('_', ' ').title()}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    await send_thinking_animation(callback.message.chat.id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
    result = await process_file(user_id, file_id, file_name, process_type)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    await remove_thinking_animation(callback.message.chat.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    use_stream = get_user_stream_mode(user_id) and len(result) > 500
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if use_stream:
        await stream_and_send_response(callback.message, result)
    else:
        await split_and_send_message(callback.message, result)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

@router.message(StateFilter(UserStates.waiting_for_spam_pattern))
@admin_only
@safe_execution
async def process_spam_pattern(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
    pattern = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if pattern.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω', '—Å—Ç–æ–ø', 'stop']:
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        re.compile(pattern)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Å–ø–∏—Å–æ–∫
        SPAM_PATTERNS.append(pattern)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        await save_spam_patterns()
        
        await message.answer(
            f"‚úÖ –°–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n`{pattern}`",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.clear()
    except re.error as e:
        # –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )

@router.message(StateFilter(UserStates.waiting_for_direct_model))
@safe_execution
async def process_direct_model(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é."""
    model_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if model_name.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω', '—Å—Ç–æ–ø', 'stop']:
        await state.clear()
        await message.answer("‚ùå –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω. –û—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏
    if '/' not in model_name:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `provider/model-name`.\n"
            "–ü—Ä–∏–º–µ—Ä: meta-llama/Llama-3.3-70B-Instruct\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    user_id = message.from_user.id
    
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ–¥–µ–ª—å
    previous_model = user_settings[str(user_id)].get("model", ALL_MODELS[0])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
    user_settings[str(user_id)]["model"] = model_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    favorite_models = user_settings[str(user_id)].get("favorite_models", [])
    if model_name not in favorite_models:
        favorite_models.append(model_name)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if len(favorite_models) > 5:
            favorite_models.pop(0)
        user_settings[str(user_id)]["favorite_models"] = favorite_models
    
    await save_user_settings()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.clear()
    
    await message.answer(
        f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{model_name}**\n\n"
        f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, "
        f"–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ.\n\n"
        f"–ú–æ–¥–µ–ª—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º.",
        parse_mode=ParseMode.MARKDOWN
    )

@router.message(StateFilter(UserStates.waiting_for_premium_code))
@safe_execution
async def process_premium_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞."""
    code = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if code.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–æ—Ç–º–µ–Ω', '—Å—Ç–æ–ø', 'stop']:
        await state.clear()
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–º–∏—É–º-–∫–æ–¥—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not premium_codes:
        await load_premium_codes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    if code in premium_codes:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ 30 –¥–Ω–µ–π)
        if await activate_premium(user_id, 30):
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            premium_codes.remove(code)
            await save_premium_codes()
            
            await message.answer(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("model:"))
@safe_execution
async def callback_select_model(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    user_id = callback.from_user.id
    model = callback.data.split(":", 1)[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }

    user_settings[str(user_id)]["model"] = model
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    favorite_models = user_settings[str(user_id)].get("favorite_models", [])
    if model not in favorite_models:
        favorite_models.append(model)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if len(favorite_models) > 5:
            favorite_models.pop(0)
        user_settings[str(user_id)]["favorite_models"] = favorite_models
    
    await save_user_settings()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.clear()

    await callback.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{format_model_name(model)}**\n\n"
        "–ú–æ–¥–µ–ª—å —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer("–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

@router.callback_query(lambda c: c.data.startswith("temp:"))
@safe_execution
async def callback_select_temperature(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è temperature."""
    user_id = callback.from_user.id
    temperature = float(callback.data.split(":", 1)[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ temperature
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }

    user_settings[str(user_id)]["temperature"] = temperature
    await save_user_settings()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.clear()

    await callback.message.edit_text(
        f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{temperature}**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥!",
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

@router.callback_query(lambda c: c.data.startswith("feedback:"))
@safe_execution
async def callback_feedback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞."""
    parts = callback.data.split(":")
    feedback_type = parts[1]
    message_id = parts[2] if len(parts) > 2 else None
    
    user_id = callback.from_user.id
    
    if feedback_type == "good":
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
        feedback_value = 1
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!")
    else:
        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
        feedback_value = -1
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    if user_id not in user_feedback:
        user_feedback[user_id] = {}
    
    user_feedback[user_id][message_id] = feedback_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    update_context_importance(user_id, feedback_value)
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–∞
    try:
        await callback.message.edit_reply_markup()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

@router.callback_query(lambda c: c.data.startswith("rephrase:"))
@safe_execution
async def callback_rephrase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞."""
    message_id = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    await callback.answer("–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    original_text = callback.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    thinking_msg_id = await send_thinking_animation(callback.message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    new_answer = await rephrase_answer(
        user_id,
        original_text,
        "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ –∂–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –Ω–æ –≤—ã—Ä–∞–∂–∞—è –µ–≥–æ –∏–Ω–∞—á–µ"
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    if thinking_msg_id:
        await remove_thinking_animation(callback.message.chat.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    use_stream = get_user_stream_mode(user_id) and len(new_answer) > 500
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if use_stream:
        sent_message = await stream_and_send_response(callback.message, new_answer)
    else:
        sent_message = await split_and_send_message(callback.message, new_answer)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if sent_message:
        feedback_id = str(uuid.uuid4())
        try:
            await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")

@router.callback_query(lambda c: c.data.startswith("elaborate:"))
@safe_execution
async def callback_elaborate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç."""
    message_id = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    
    await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    original_text = callback.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    thinking_msg_id = await send_thinking_animation(callback.message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
    new_answer = await rephrase_answer(
        user_id,
        original_text,
        "–†–∞—Å—à–∏—Ä—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–∏–≤ –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    if thinking_msg_id:
        await remove_thinking_animation(callback.message.chat.id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    use_stream = get_user_stream_mode(user_id) and len(new_answer) > 500
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if use_stream:
        sent_message = await stream_and_send_response(callback.message, new_answer)
    else:
        sent_message = await split_and_send_message(callback.message, new_answer)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if sent_message:
        feedback_id = str(uuid.uuid4())
        try:
            await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")

@router.message(StateFilter(UserStates.custom_system_prompt))
@safe_execution
async def process_custom_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    user_id = message.from_user.id
    new_prompt = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if not new_prompt or len(new_prompt) < 5:
        await message.answer(
            "‚ùå –ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if str(user_id) not in user_settings:
        user_settings[str(user_id)] = {
            "model": ALL_MODELS[0],
            "temperature": CONFIG["TEMPERATURE"],
            "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
            "last_reset": str(date.today()),
            "preferred_topics": [],
            "favorite_models": [],
            "last_active": str(date.today()),
            "is_premium": False,
            "premium_until": None,
            "language": "ru",
            "notifications_enabled": True,
            "auto_translate": False,
            "interface_mode": "standard",
            "stream_mode": CONFIG["STREAM_RESPONSES"]
        }

    user_settings[str(user_id)]["system_prompt"] = new_prompt
    await save_user_settings()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_contexts:
        # –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, msg in enumerate(user_contexts[user_id]):
            if msg.get("role") == "system":
                user_contexts[user_id][i]["content"] = new_prompt
                break
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        else:
            user_contexts[user_id].insert(0, {
                "role": "system", 
                "content": new_prompt,
                "importance": 1.0,
                "timestamp": datetime.now().isoformat()
            })
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        user_contexts[user_id] = [{
            "role": "system", 
            "content": new_prompt,
            "importance": 1.0,
            "timestamp": datetime.now().isoformat()
        }]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await save_user_contexts()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.clear()

    await message.answer(
        "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
    )

@router.message(StateFilter(UserStates.waiting_for_image_caption))
@safe_execution
async def process_image_caption(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é."""
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    image_data = data.get("image_data")
    
    if not image_data:
        await message.answer("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    caption = message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    if caption.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '—Å—Ç–æ–ø', 'stop']:
        await message.answer("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    user_id = message.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    thinking_msg_id = await send_thinking_animation(message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_response = await get_ai_response(user_id, caption, image_data)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    if thinking_msg_id:
        await remove_thinking_animation(message.chat.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    ai_response = clean_markdown(ai_response)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    use_stream = get_user_stream_mode(user_id) and len(ai_response) > 500
    
    if use_stream:
        sent_message = await stream_and_send_response(message, ai_response)
    else:
        sent_message = await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_id = str(uuid.uuid4())
    try:
        await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(StateFilter(UserStates.waiting_for_admin_broadcast))
@admin_only
@safe_execution
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    broadcast_text = message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
    if broadcast_text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '—Å—Ç–æ–ø', 'stop']:
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="broadcast_confirm"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(broadcast_text=broadcast_text)
    
    await message.answer(
        f"üì¢ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{broadcast_text}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        reply_markup=keyboard.as_markup()
    )

@router.callback_query(lambda c: c.data == "broadcast_confirm")
@safe_execution
async def callback_broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")
    
    if not broadcast_text:
        await callback.message.edit_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{broadcast_text}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = set()
    for user_id in user_settings:
        try:
            all_users.add(int(user_id))
        except (ValueError, TypeError):
            continue
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    success_count = 0
    fail_count = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in all_users:
        try:
            await bot.send_message(user_id, broadcast_text)
            success_count += 1
            
            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
        f"- –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"- –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {fail_count}"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "broadcast_cancel")
@safe_execution
async def callback_broadcast_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await callback.message.edit_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

@router.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
@safe_execution
async def handle_new_chat_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    user_id = message.from_user.id
    clear_user_context(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    system_prompt = get_system_prompt(user_id)
    add_to_user_context(user_id, "system", system_prompt)

    await message.answer(
        "üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –í—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ, —Å —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å."
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@safe_execution
async def handle_settings_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    await cmd_settings(message)

@router.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")
@safe_execution
async def handle_models_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    await cmd_models(message, state)

@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
@safe_execution
async def handle_upload_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    await cmd_upload(message)

@router.message(F.document)
@safe_execution
@spam_filter
async def handle_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) in user_settings:
        user_settings[str(user_id)]["last_active"] = str(date.today())
        await save_user_settings()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not (is_premium_user(user_id) or username == "qqq5599"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        today = date.today().strftime("%Y-%m-%d")
        if str(user_id) in user_settings:
            if user_settings[str(user_id)].get("last_reset") != today:
                user_settings[str(user_id)]["requests_left"] = CONFIG["MAX_DAILY_REQUESTS"]
                user_settings[str(user_id)]["last_reset"] = today
                await save_user_settings()
            
            if user_settings[str(user_id)].get("requests_left", 0) <= 0:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º.")
                return
            
            user_settings[str(user_id)]["requests_left"] -= 1
            await save_user_settings()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_id = message.document.file_id
    file_name = message.document.file_name or "document.txt"
    file_size = message.document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_size > CONFIG["MAX_FILE_SIZE"]:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {CONFIG['MAX_FILE_SIZE'] / (1024 * 1024):.1f} –ú–ë."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(UserStates.waiting_for_file_processing)
    await state.update_data(file_id=file_id, file_name=file_name)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    await message.answer(
        f"üìÑ –§–∞–π–ª '{file_name}' –ø–æ–ª—É—á–µ–Ω!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:",
        reply_markup=await create_file_processing_keyboard()
    )

@router.message(F.photo)
@safe_execution
@spam_filter
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏."""
    user_id = message.from_user.id
    username = message.from_user.username

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) in user_settings:
        user_settings[str(user_id)]["last_active"] = str(date.today())
        await save_user_settings()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –ø—Ä–µ–º–∏—É–º –∏ qqq5599)
    if not (is_premium_user(user_id) or username == "qqq5599"):
        if str(user_id) in user_settings:
            today = date.today().strftime("%Y-%m-%d")
            if user_settings[str(user_id)].get("last_reset") != today:
                user_settings[str(user_id)]["requests_left"] = CONFIG["MAX_DAILY_REQUESTS"]
                user_settings[str(user_id)]["last_reset"] = today
                await save_user_settings()
            
            if user_settings[str(user_id)].get("requests_left", 0) <= 0:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º.")
                return
            
            user_settings[str(user_id)]["requests_left"] -= 1
            await save_user_settings()

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = message.photo[-1]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
    caption = message.caption
    if not caption:
        # –ü–æ–ª—É—á–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_data = await process_image(photo)
        if not image_data:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG, PNG –∏–ª–∏ WEBP "
                "–∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        await state.set_state(UserStates.waiting_for_image_caption)
        await state.update_data(image_data=image_data)
        
        await message.answer(
            "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?\n"
            "- –û–ø–∏—à–∏ –¥–µ—Ç–∞–ª–∏ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "- –ö–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Ñ–æ—Ç–æ?\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    current_model = get_user_model(user_id)
    supports_vision = any(vision_model in current_model for vision_model in ["Vision", "VL", "vision"])

    if not supports_vision:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–º—Å—è –Ω–∞ –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        vision_models = MODEL_CATEGORIES["–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"]
        if vision_models:
            new_model = vision_models[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            if str(user_id) not in user_settings:
                user_settings[str(user_id)] = {
                    "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
                    "temperature": CONFIG["TEMPERATURE"],
                    "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
                    "last_reset": str(date.today()),
                    "preferred_topics": [],
                    "favorite_models": [],
                    "last_active": str(date.today()),
                    "is_premium": False,
                    "premium_until": None,
                    "language": "ru",
                    "notifications_enabled": True,
                    "auto_translate": False,
                    "interface_mode": "standard",
                    "stream_mode": CONFIG["STREAM_RESPONSES"]
                }

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ–¥–µ–ª—å
            previous_model = user_settings[str(user_id)].get("model", ALL_MODELS[0])
            user_settings[str(user_id)]["previous_model"] = previous_model

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            user_settings[str(user_id)]["model"] = new_model
            await save_user_settings()

            await message.answer(
                f"üîÑ –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: "
                f"**{format_model_name(new_model)}**",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer(
                "‚ùå –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."
            )
            return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    thinking_msg_id = await send_thinking_animation(message.chat.id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data = await process_image(photo)

    if not image_data:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
        if thinking_msg_id:
            await remove_thinking_animation(message.chat.id)
            
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG, PNG –∏–ª–∏ WEBP "
            "–∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    ai_response = await get_ai_response(user_id, caption, image_data)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    if thinking_msg_id:
        await remove_thinking_animation(message.chat.id)

    # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏ –º–æ–¥–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    if not supports_vision and str(user_id) in user_settings and "previous_model" in user_settings[str(user_id)]:
        previous_model = user_settings[str(user_id)]["previous_model"]
        user_settings[str(user_id)]["model"] = previous_model
        del user_settings[str(user_id)]["previous_model"]
        await save_user_settings()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        ai_response = clean_markdown(ai_response)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        use_stream = get_user_stream_mode(user_id) and len(ai_response) > 500
        
        if use_stream:
            sent_message = await stream_and_send_response(message, ai_response)
        else:
            sent_message = await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_id = str(uuid.uuid4())
        try:
            await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")

        await message.answer(
            f"üîÑ –í–µ—Ä–Ω—É–ª—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏: **{format_model_name(previous_model)}**",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        ai_response = clean_markdown(ai_response)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        use_stream = get_user_stream_mode(user_id) and len(ai_response) > 500
        
        if use_stream:
            sent_message = await stream_and_send_response(message, ai_response)
        else:
            sent_message = await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_id = str(uuid.uuid4())
        try:
            await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")

# Admin command - generate premium code
@router.message(Command("gencode"))
@admin_only
@safe_execution
async def cmd_generate_code(message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–º–∏—É–º-–∫–æ–¥—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if not premium_codes:
        await load_premium_codes()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    new_code = generate_premium_code()
    await save_premium_codes()
    
    await message.answer(
        f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–µ–º–∏—É–º-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: `{new_code}`\n\n"
        f"–≠—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
        parse_mode=ParseMode.MARKDOWN
    )

# Admin command - send broadcast
@router.message(Command("broadcast"))
@admin_only
@safe_execution
async def cmd_broadcast(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    await state.set_state(UserStates.waiting_for_admin_broadcast)
    
    await message.answer(
        "üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
    )

# Admin command - get statistics
@router.message(Command("stats"))
@admin_only
@safe_execution
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    stats = bot_metrics.get_stats()
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (v{BOT_VERSION})**\n\n"
        f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã**: {stats['uptime_formatted']}\n"
        f"üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: {stats['users']['active_count']}\n\n"
        f"üî¢ **–ó–∞–ø—Ä–æ—Å—ã**:\n"
        f"- –í—Å–µ–≥–æ: {stats['requests']['total']}\n"
        f"- –£—Å–ø–µ—à–Ω—ã—Ö: {stats['requests']['success']}\n"
        f"- –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['requests']['failed']}\n"
        f"- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['requests']['success_rate']:.1f}%\n"
        f"- –°–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['complex_queries']}\n\n"
        f"üö´ **–°–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä**:\n"
        f"- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['spam_blocked']}\n"
        f"- –ë–ª–æ–∫-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(blocked_users)}\n\n"
        f"‚è±Ô∏è **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞**:\n"
        f"- –°—Ä–µ–¥–Ω–µ–µ: {stats['response_time']['average_ms']:.0f} –º—Å\n"
        f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {stats['response_time']['min_ms']:.0f} –º—Å\n"
        f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {stats['response_time']['max_ms']:.0f} –º—Å\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 –º–æ–¥–µ–ª–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    stats_text += "üìà **–¢–æ–ø –º–æ–¥–µ–ª–∏**:\n"
    top_models = list(stats['models'].items())[:3]
    for i, (model, count) in enumerate(top_models, 1):
        model_name = model.split('/')[-1]
        stats_text += f"{i}. {model_name}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    stats_text += "\nüîç **–¢–æ–ø —Ç–µ–º—ã**:\n"
    top_topics = list(stats['topics'].items())[:3]
    for i, (topic, count) in enumerate(top_topics, 1):
        stats_text += f"{i}. {topic.capitalize()}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –æ—à–∏–±–æ–∫
    stats_text += "\n‚ùå **–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏**:\n"
    for error, count in list(stats['top_errors'].items())[:3]:
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        error_text = error[:50] + "..." if len(error) > 50 else error
        stats_text += f"- {error_text}: {count} —Ä–∞–∑\n"
    
    await message.answer(stats_text, parse_mode=ParseMode.MARKDOWN)

# Admin command - create backup
@router.message(Command("backup"))
@admin_only
@safe_execution
async def cmd_backup(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    
    backup_path = await create_backup_zip()
    if backup_path:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞
        try:
            await message.answer_document(
                FSInputFile(backup_path, filename=os.path.basename(backup_path)),
                caption=f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö.")

# Admin command - maintenance mode
@router.message(Command("maintenance"))
@admin_only
@safe_execution
async def cmd_maintenance(message: Message):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    CONFIG["MAINTENANCE_MODE"] = not CONFIG["MAINTENANCE_MODE"]
    
    if CONFIG["MAINTENANCE_MODE"]:
        await message.answer(
            "üîß –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è **–í–ö–õ–Æ–ß–ï–ù**\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –í—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.answer(
            "‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è **–í–´–ö–õ–Æ–ß–ï–ù**\n\n"
            "–ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode=ParseMode.MARKDOWN
        )

@router.message()
@safe_execution
@rate_limit
@spam_filter
async def handle_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if CONFIG["MAINTENANCE_MODE"] and message.from_user.id not in CONFIG["ADMIN_IDS"]:
        await message.answer(
            "üîß –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    greeting_response = is_greeting(message.text)
    if greeting_response:
        await message.answer(greeting_response)
        return

    user_id = message.from_user.id
    username = message.from_user.username

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(user_id) in user_settings:
        user_settings[str(user_id)]["last_active"] = str(date.today())
        await save_user_settings()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not (is_premium_user(user_id) or username == "qqq5599"):
        today = date.today().strftime("%Y-%m-%d")
        if str(user_id) not in user_settings:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings[str(user_id)] = {
                "model": ALL_MODELS[0],
                "system_prompt": CONFIG["DEFAULT_SYSTEM_PROMPT"],
                "temperature": CONFIG["TEMPERATURE"],
                "requests_left": CONFIG["MAX_DAILY_REQUESTS"],
                "last_reset": today,
                "preferred_topics": [],
                "favorite_models": [],
                "last_active": today,
                "is_premium": False,
                "premium_until": None,
                "language": "ru",
                "notifications_enabled": True,
                "auto_translate": False,
                "interface_mode": "standard",
                "stream_mode": CONFIG["STREAM_RESPONSES"]
            }
            await save_user_settings()
        elif user_settings[str(user_id)].get("last_reset") != today:
            user_settings[str(user_id)]["requests_left"] = CONFIG["MAX_DAILY_REQUESTS"]
            user_settings[str(user_id)]["last_reset"] = today
            await save_user_settings()

        if user_settings[str(user_id)].get("requests_left", 0) <= 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞
            keyboard = InlineKeyboardBuilder()
            keyboard.row(InlineKeyboardButton(
                text="‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º", 
                callback_data="activate_premium"
            ))
            
            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º!",
                reply_markup=keyboard.as_markup()
            )
            return

        user_settings[str(user_id)]["requests_left"] -= 1
        await save_user_settings()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    thinking_msg_id = await send_thinking_animation(message.chat.id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    topic = detect_question_topic(message.text)
    if topic:
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞: {topic}")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    start_time = time.time()
    ai_response = await get_ai_response(user_id, message.text)
    response_time = time.time() - start_time
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "AI –¥—É–º–∞–µ—Ç..."
    if thinking_msg_id:
        await remove_thinking_animation(message.chat.id)
        
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ {response_time:.2f} —Å–µ–∫—É–Ω–¥")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    use_stream = get_user_stream_mode(user_id) and len(ai_response) > 500
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        # –û—á–∏—â–∞–µ–º Markdown –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        ai_response = clean_markdown(ai_response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if use_stream:
            sent_message = await stream_and_send_response(message, ai_response)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            sent_message = await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_id = str(uuid.uuid4())
        try:
            await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            sent_message = await message.answer(ai_response, parse_mode=None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_id = str(uuid.uuid4())
            try:
                await sent_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
            except Exception as inner_e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {inner_e}")
        
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e2}")
            
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            try:
                last_message = await split_and_send_message(message, ai_response, parse_mode=None)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                if last_message:
                    feedback_id = str(uuid.uuid4())
                    try:
                        await last_message.edit_reply_markup(reply_markup=await create_feedback_keyboard(feedback_id))
                    except Exception as e3:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e3}")
            
            except Exception as e3:
                logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e3}")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async def cleanup_old_data():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –º–æ–¥–µ–ª–µ–π
            current_time = time.time()
            for key in list(model_cache.keys()):
                if current_time - model_cache[key]["timestamp"] > CONFIG["CACHE_TIMEOUT"]:
                    del model_cache[key]
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_folder in glob.glob(os.path.join(USER_MEDIA_DIR, "*")):
                try:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                    for user_file in glob.glob(os.path.join(user_folder, "*")):
                        file_time = os.path.getmtime(user_file)
                        if current_time - file_time > 86400:  # 24 —á–∞—Å–∞
                            os.remove(user_file)
                            logger.debug(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {user_file}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            today = date.today()
            inactive_threshold = 30  # –î–Ω–µ–π
            
            for user_id, settings in list(user_settings.items()):
                if "last_active" in settings:
                    try:
                        last_active = date.fromisoformat(settings["last_active"])
                        days_inactive = (today - last_active).days
                        
                        if days_inactive > inactive_threshold:
                            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if int(user_id) in user_contexts and user_contexts[int(user_id)]:
                                # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                                archive_dir = os.path.join(CONFIG["PERSISTENT_STORAGE"], "archived_contexts")
                                os.makedirs(archive_dir, exist_ok=True)
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∞—Ä—Ö–∏–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                                archive_file = os.path.join(archive_dir, f"context_{user_id}_{last_active}.json")
                                async with aio_open(archive_file, 'w', encoding='utf-8') as f:
                                    await f.write(json.dumps(user_contexts[int(user_id)], ensure_ascii=False, indent=2))
                                
                                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
                                del user_contexts[int(user_id)]
                    except (ValueError, TypeError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            await save_user_contexts()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫
            await bot_metrics._cleanup_old_metrics(48)  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ 48 —á–∞—Å–æ–≤
            
            logger.info("–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}\n{traceback.format_exc()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–∞–∑ –≤ –¥–µ–Ω—å
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
async def handle_webhook(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –æ—Ç Telegram."""
    if request.match_info.get('token') != CONFIG["TOKEN"]:
        return web.Response(status=403)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update_data = await request.json()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        await dp.feed_update(bot=bot, update=update_data)
        
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async def handle_home(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    return web.Response(text="Telegram Bot Server is running.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
async def handle_health(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    response = {
        "status": "online",
        "version": BOT_VERSION,
        "uptime": time.time() - start_time,
        "maintenance_mode": CONFIG["MAINTENANCE_MODE"],
        "timestamp": time.time()
    }
    return web.json_response(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
async def handle_stats(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞."""
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞
    auth_key = request.query.get('key')
    if auth_key != CONFIG.get("STATS_API_KEY", "statskey"):
        return web.json_response({"error": "Unauthorized"}, status=401)
    
    stats = bot_metrics.get_stats()
    return web.json_response(stats)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    global start_time, http_session
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    http_session = aiohttp.ClientSession()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        await load_user_settings()
        await load_user_contexts()
        await load_model_performance()
        await load_premium_codes()
        await load_blocked_users()
        await load_spam_patterns()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        startup_success = await verify_bot_startup()
        if not startup_success:
            logger.warning("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        await bot_metrics.initialize()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = web.Application()
        app.router.add_get('/', handle_home)
        app.router.add_get('/health', handle_health)
        app.router.add_get('/stats', handle_stats)
        app.router.add_post(f'/webhook/{CONFIG["TOKEN"]}', handle_webhook)

        if CONFIG["USE_WEBHOOK"]:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
            webhook_url = f"{APP_URL}/webhook/{CONFIG['TOKEN']}"
            await bot.set_webhook(url=webhook_url, secret_token=CONFIG["WEBHOOK_SECRET_TOKEN"])
            logger.info(f"Webhook set to {webhook_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            asyncio.create_task(cleanup_old_data())
            asyncio.create_task(perform_health_check())
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(ALL_MODELS)} –º–æ–¥–µ–ª–µ–π.")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            
            # –ñ–¥–µ–º –≤–µ—á–Ω–æ
            while True:
                await asyncio.sleep(3600)
        else:
            # –û—á–∏—â–∞–µ–º –≤–µ–±-—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
            await bot.delete_webhook(drop_pending_updates=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            asyncio.create_task(cleanup_old_data())
            asyncio.create_task(perform_health_check())

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(ALL_MODELS)} –º–æ–¥–µ–ª–µ–π.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', PORT)
            await site.start()
            
            logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        if http_session is not None:
            await http_session.close()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async def start_bot_with_recovery():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ —Å–±–æ—è—Ö."""
    max_restarts = 5
    restart_count = 0
    restart_delay = 5  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    while restart_count < max_restarts:
        try:
            await main()
            # –ï—Å–ª–∏ main() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            break
        except Exception as e:
            restart_count += 1
            logger.critical(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}\n{traceback.format_exc()}\n"
                f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {restart_count}/{max_restarts} —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in CONFIG["ADMIN_IDS"]:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:\n{str(e)[:500]}\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {restart_count}/{max_restarts}"
                    )
                except Exception as notify_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {notify_error}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff)
            await asyncio.sleep(restart_delay)
            restart_delay *= 2  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Ä–∞–∑–∞ —Å –∫–∞–∂–¥—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            
    if restart_count >= max_restarts:
        logger.critical(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ {max_restarts} –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        for admin_id in CONFIG["ADMIN_IDS"]:
            try:
                await bot.send_message(
                    admin_id, 
                    f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ {max_restarts} –ø–æ–ø—ã—Ç–æ–∫."
                )
            except Exception:
                pass

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        loop.run_until_complete(start_bot_with_recovery())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
