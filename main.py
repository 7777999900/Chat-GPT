import logging
import os
import json
import aiohttp
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_TOKEN = "8153698800:AAEtpJ5IlLTG9TIvpU4iM8EYagDkfdqGeeY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
IONET_API_KEY = "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6Ijc3YmJkZTE2LTIwZmQtNDI0OS1hNDUxLTRhNjFjZWZmNzFkZSIsImV4cCI6NDg5OTQyMDY5OX0.H8-y9vk5MF4T46gcVD_6NeEGP-4WaZUcqcNV5LJclahCOm8oC79no0Nv5hbIBj3ZW0XLI9uoRErKzd_K41N4_g"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á API –æ—Ç io.net
OWNER_USERNAME = "qqq5599"  # –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)
DEFAULT_DAILY_LIMIT = 10  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "bot_data.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
AVAILABLE_MODELS = {
    "llama4_maverick": {"name": "Llama-4 Maverick 17B", "id": "llama-4-maverick-17b"},
    "qwq": {"name": "QwQ 32B", "id": "qwq-32b"},
    "deepseek_r1": {"name": "DeepSeek R1", "id": "deepseek-r1"},
    "deepseek_r1_distill": {"name": "DeepSeek R1 Distill Llama 70B", "id": "deepseek-r1-distill-llama-70b"},
    "llama_3_3": {"name": "Llama 3.3 70B Instruct", "id": "llama-3.3-70b-instruct"},
    "dbrx": {"name": "DBRX Instruct", "id": "dbrx-instruct"},
    "sky_t1": {"name": "Sky T1 32B Preview", "id": "sky-t1-32b-preview"},
    "mistral_large": {"name": "Mistral Large Instruct", "id": "mistral-large-instruct"},
    "watt_tool": {"name": "Watt Tool 70B", "id": "watt-tool-70b"},
    "bespoke_stratos": {"name": "Bespoke Stratos 32B", "id": "bespoke-stratos-32b"}
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –±–æ—Ç–∞
AVAILABLE_ROLES = {
    "assistant": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
    "teacher": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –æ–±—ä—è—Å–Ω—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —á—ë—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –ø—Ä–∏–≤–æ–¥—è –ø—Ä–∏–º–µ—Ä—ã.",
    "programmer": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: –æ–±—ä—è—Å–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã, –¥–µ–ª–∞—è –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞—Ö –∫–æ–¥–∞.",
    "marketer": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∏–¥–µ–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏.",
    "psychologist": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥: –¥–∞—ë—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º —ç–º–ø–∞—Ç–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π.",
    "analyst": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫: —Å—Ç—Ä–æ–∏—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
}

# –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
AVAILABLE_STYLES = {
    "balanced": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è)",
    "concise": "–ö—Ä–∞—Ç–∫–∏–π (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã)",
    "detailed": "–ü–æ–¥—Ä–æ–±–Ω—ã–π (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"
}

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                user_data = json.load(f)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        user_data = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def check_user_limit(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if username == OWNER_USERNAME:
        return True, "‚àû"  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
    
    today = datetime.now().strftime("%Y-%m-%d")
    user_id_str = str(user_id)
    
    if user_id_str not in user_data:
        user_data[user_id_str] = {
            "date": today,
            "count": 0,
            "model": "llama4_maverick",  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "role": "assistant",  # –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "style": "balanced",  # –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "history": []  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        }
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if user_data[user_id_str]["date"] != today:
        user_data[user_id_str]["date"] = today
        user_data[user_id_str]["count"] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if user_data[user_id_str]["count"] < DEFAULT_DAILY_LIMIT:
        user_data[user_id_str]["count"] += 1
        save_data()
        remaining = DEFAULT_DAILY_LIMIT - user_data[user_id_str]["count"]
        return True, remaining
    
    return False, 0

async def get_ai_response(prompt, model_id, role, style, history=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ io.net API"""
    if history is None:
        history = []
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –∏ —Å—Ç–∏–ª—è
    system_prompt = f"–¢—ã - {AVAILABLE_ROLES[role]}"
    
    if style == "concise":
        system_prompt += " –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏–∑–±–µ–≥–∞—è –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
    elif style == "detailed":
        system_prompt += " –î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
    messages = [{"role": "system", "content": system_prompt}]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
    for msg in history[-10:]:
        messages.append(msg)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": prompt})
    
    async with aiohttp.ClientSession() as session:
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {IONET_API_KEY}"
            }
            
            payload = {
                "model": AVAILABLE_MODELS[model_id]["id"],
                "messages": messages,
                "temperature": 0.7,
                "max_tokens": 2000
            }
            
            async with session.post(
                "https://api.io.net/v1/chat/completions",
                headers=headers,
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}, {error_text}")
                    return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API (—Å—Ç–∞—Ç—É—Å {response.status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id_str = str(user.id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø - –±–æ—Ç —Å –º–æ—â–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /models - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n"
        f"‚Ä¢ /role - –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞\n"
        f"‚Ä¢ /style - –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ /stats - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        f"‚Ä¢ /plan - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        f"‚Ä¢ /feedback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
    )
    
    if user.username == OWNER_USERNAME:
        welcome_message += "üîë –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞."
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id_str not in user_data:
            today = datetime.now().strftime("%Y-%m-%d")
            user_data[user_id_str] = {
                "date": today,
                "count": 0,
                "model": "llama4_maverick",
                "role": "assistant",
                "style": "balanced",
                "history": []
            }
            save_data()
        
        welcome_message += f"üìù –£ –≤–∞—Å {DEFAULT_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ /plan"
    
    await update.message.reply_text(welcome_message)

async def select_model(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for model_id, model_info in AVAILABLE_MODELS.items():
        keyboard.append([InlineKeyboardButton(model_info["name"], callback_data=f"model_{model_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)

async def select_role(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    for role_id, role_desc in AVAILABLE_ROLES.items():
        button_text = role_desc.split(":")[0] if ":" in role_desc else role_desc[:30] + "..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"role_{role_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", reply_markup=reply_markup)

async def select_style(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /style –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
    for style_id, style_desc in AVAILABLE_STYLES.items():
        keyboard.append([InlineKeyboardButton(style_desc, callback_data=f"style_{style_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)

async def show_stats(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user = update.effective_user
    user_id_str = str(user.id)
    
    if user_id_str not in user_data:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return
    
    user_info = user_data[user_id_str]
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if user_info["date"] != today:
        user_info["date"] = today
        user_info["count"] = 0
        save_data()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_name = AVAILABLE_MODELS[user_info["model"]]["name"]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
    role_desc = AVAILABLE_ROLES[user_info["role"]]
    role_name = role_desc.split(":")[0] if ":" in role_desc else role_desc[:30]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
    style_name = AVAILABLE_STYLES[user_info["style"]]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
    if user.username == OWNER_USERNAME:
        remaining = "‚àû"  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    else:
        remaining = DEFAULT_DAILY_LIMIT - user_info["count"]
        if remaining < 0:
            remaining = 0
    
    stats_message = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
        f"üìÜ –î–∞—Ç–∞: {today}\n"
        f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_info['count']}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
        f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}\n"
        f"üëë –†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {role_name}\n"
        f"üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {style_name}\n"
    )
    
    await update.message.reply_text(stats_message, parse_mode="Markdown")

async def show_plan(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ"""
    user = update.effective_user
    
    if user.username == OWNER_USERNAME:
        plan_message = (
            "üîë *VIP-—Å—Ç–∞—Ç—É—Å*\n\n"
            "–£ –≤–∞—Å –µ—Å—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        )
    else:
        plan_message = (
            "üìù *–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –ë–∞–∑–æ–≤—ã–π*\n\n"
            f"‚Ä¢ {DEFAULT_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –ò–ò\n"
            "‚Ä¢ –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è\n\n"
            "üíº *–ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ*\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-—Ç–∞—Ä–∏—Ñ–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @" + OWNER_USERNAME
        )
    
    await update.message.reply_text(plan_message, parse_mode="Markdown")

async def feedback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞"""
    await update.message.reply_text(
        "üì´ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å /feedback, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "/feedback –ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç! –•–æ—Ç–µ–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å..."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if context.args:
        feedback_text = " ".join(context.args)
        user = update.effective_user
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
        feedback_message = (
            f"üì¨ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n\n"
            f"–û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
            f"ID: {user.id}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback_text}"
        )
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç {user.id}: {feedback_text}")
        
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")

async def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_id_str = str(user.id)
    data = query.data
    
    if user_id_str not in user_data:
        today = datetime.now().strftime("%Y-%m-%d")
        user_data[user_id_str] = {
            "date": today,
            "count": 0,
            "model": "llama4_maverick",
            "role": "assistant",
            "style": "balanced",
            "history": []
        }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    if data.startswith("model_"):
        model_id = data.split("_")[1]
        if model_id in AVAILABLE_MODELS:
            user_data[user_id_str]["model"] = model_id
            save_data()
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {AVAILABLE_MODELS[model_id]['name']}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    elif data.startswith("role_"):
        role_id = data.split("_")[1]
        if role_id in AVAILABLE_ROLES:
            user_data[user_id_str]["role"] = role_id
            save_data()
            role_desc = AVAILABLE_ROLES[role_id]
            role_name = role_desc.split(":")[0] if ":" in role_desc else role_desc[:30]
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role_name}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    elif data.startswith("style_"):
        style_id = data.split("_")[1]
        if style_id in AVAILABLE_STYLES:
            user_data[user_id_str]["style"] = style_id
            save_data()
            await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {AVAILABLE_STYLES[style_id]}")

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if update.message.text and update.message.text.startswith("/feedback "):
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        context.args = update.message.text.split()[1:]
        await feedback(update, context)
        return
    
    user = update.effective_user
    user_id_str = str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    has_limit, remaining = await check_user_limit(user.id, user.username)
    
    if not has_limit:
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–º–∏—É–º-—Ç–∞—Ä–∏—Ñ–µ, –≤–≤–µ–¥—è /plan"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id_str not in user_data:
        today = datetime.now().strftime("%Y-%m-%d")
        user_data[user_id_str] = {
            "date": today,
            "count": 1,  # –°—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            "model": "llama4_maverick",
            "role": "assistant",
            "style": "balanced",
            "history": []
        }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, —Ä–æ–ª–∏ –∏ —Å—Ç–∏–ª—è
    model_id = user_data[user_id_str]["model"]
    role = user_data[user_id_str]["role"]
    style = user_data[user_id_str]["style"]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data[user_id_str]["history"].append({"role": "user", "content": message_text})
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ –ò–ò
    response = await get_ai_response(
        message_text,
        model_id,
        role,
        style,
        user_data[user_id_str]["history"]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data[user_id_str]["history"].append({"role": "assistant", "content": response})
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–∞–º—è—Ç—å
    if len(user_data[user_id_str]["history"]) > 20:
        user_data[user_id_str]["history"] = user_data[user_id_str]["history"][-20:]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user.username != OWNER_USERNAME:
        footer = f"\n\n[–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}]"
    else:
        footer = "\n\n[–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º]"
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    max_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    if len(response) + len(footer) <= max_length:
        await update.message.reply_text(response + footer)
    else:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
        for i, part in enumerate(parts):
            if i == len(parts) - 1:
                await update.message.reply_text(part + footer)
            else:
                await update.message.reply_text(part)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    load_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("models", select_model))
    application.add_handler(CommandHandler("role", select_role))
    application.add_handler(CommandHandler("style", select_style))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("plan", show_plan))
    application.add_handler(CommandHandler("feedback", feedback))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    save_data()

if __name__ == "__main__":
    main()
